{
  "address": "0x9b3989dC82b344D9Df9a986Ff4CC37B895e3fB87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nativeMarketAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nativeAssetAddress",
          "type": "address"
        },
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "_boundValidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "OracleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mainOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pivotOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "TokenConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INVALID_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boundValidator",
      "outputs": [
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "enableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "getUnderlyingPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig[]",
          "name": "tokenConfigs_",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "updateAssetPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa95c2176e24edcece4f8283925e90e9a608cb3530e95f2b07785e759e6475e7e",
  "receipt": {
    "to": null,
    "from": "0x5C85A7Ae2B6d29C38cdF360553F8aCBC4e684c31",
    "contractAddress": "0x9b3989dC82b344D9Df9a986Ff4CC37B895e3fB87",
    "transactionIndex": 180,
    "gasUsed": "1874966",
    "logsBloom": "0x
    "blockHash": "0xb257d6ee3a7fc2b359874234facbd7e1c5e93fe4bcde0c9c41419d06e67511ac",
    "transactionHash": "0xa95c2176e24edcece4f8283925e90e9a608cb3530e95f2b07785e759e6475e7e",
    "logs": [
      {
        "transactionIndex": 180,
        "blockNumber": 20281484,
        "transactionHash": "0xa95c2176e24edcece4f8283925e90e9a608cb3530e95f2b07785e759e6475e7e",
        "address": "0x9b3989dC82b344D9Df9a986Ff4CC37B895e3fB87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005c85a7ae2b6d29c38cdf360553f8acbc4e684c31"
        ],
        "data": "0x",
        "logIndex": 256,
        "blockHash": "0xb257d6ee3a7fc2b359874234facbd7e1c5e93fe4bcde0c9c41419d06e67511ac"
      },
      {
        "transactionIndex": 180,
        "blockNumber": 20281484,
        "transactionHash": "0xa95c2176e24edcece4f8283925e90e9a608cb3530e95f2b07785e759e6475e7e",
        "address": "0x9b3989dC82b344D9Df9a986Ff4CC37B895e3fB87",
        "topics": ["0x66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d1da6a8af9d21c82af4411ff07a19073093788d",
        "logIndex": 257,
        "blockHash": "0xb257d6ee3a7fc2b359874234facbd7e1c5e93fe4bcde0c9c41419d06e67511ac"
      }
    ],
    "blockNumber": 20281484,
    "cumulativeGasUsed": "11941708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42778d0962884510b85d4D1B30DFe9e9Dd270446",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x15A9e037bf8d3CeB2733A62b48Eb719B634505f3",
    "0x5D1Da6a8af9D21c82af4411ff07A19073093788D"
  ],
  "numDeployments": 1,
  "solcInputHash": "c11a1817c3f544fec41d67932059648d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeMarketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"_boundValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"OracleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mainOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pivotOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVALID_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boundValidator\",\"outputs\":[{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"getUnderlyingPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig[]\",\"name\":\"tokenConfigs_\",\"type\":\"tuple[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"updateAssetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"nativeMarketAddress can be address(0) if on the chain we do not support native market      (e.g vETH on ethereum would not be supported, only vWETH)\",\"params\":{\"_boundValidator\":\"Address of the bound validator contract\",\"nativeAssetAddress\":\"The address of a native asset (for ethereum it would be WETH address)\"}},\"enableOracle(address,uint8,bool)\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"NotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set\",\"details\":\"Configuration for the asset **must** already exist and the asset cannot be 0 address\",\"params\":{\"asset\":\"Asset address\",\"enable\":\"Enabled boolean of the oracle\",\"role\":\"Oracle role\"}},\"getOracle(address,uint8)\":{\"params\":{\"asset\":\"asset address\",\"role\":\"Oracle role\"},\"returns\":{\"enabled\":\"Enabled flag of the oracle based on token config\",\"oracle\":\"Oracle address based on role\"}},\"getPrice(address)\":{\"custom:error\":\"Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid\",\"params\":{\"asset\":\"asset address\"},\"returns\":{\"_0\":\"price USD price in scaled decimal places.\"}},\"getTokenConfig(address)\":{\"details\":\"Gets token config by asset address\",\"params\":{\"asset\":\"asset address\"},\"returns\":{\"_0\":\"tokenConfig Config for the asset\"}},\"getUnderlyingPrice(address)\":{\"custom:error\":\"Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid\",\"params\":{\"vToken\":\"vToken address\"},\"returns\":{\"_0\":\"price USD price in scaled decimal places.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"custom:access\":\"Only Governance\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setOracle(address,address,uint8)\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"Null address error if main-role oracle address is nullNotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set\",\"custom:event\":\"Emits OracleSet event with asset address, oracle address and role of the oracle for the asset\",\"details\":\"Supplied asset **must** exist and main oracle may not be null\",\"params\":{\"asset\":\"Asset address\",\"oracle\":\"Oracle address\",\"role\":\"Oracle role\"}},\"setTokenConfig((address,address[3],bool[3]))\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"NotNullAddress is thrown if asset address is nullNotNullAddress is thrown if main-role oracle address for asset is null\",\"custom:event\":\"Emits TokenConfigAdded event when the asset config is set successfully by the authorized account\",\"details\":\"main oracle **must not** be a null address\",\"params\":{\"tokenConfig\":\"Token config struct\"}},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"Throws a length error if the length of the token configs array is 0\",\"params\":{\"tokenConfigs_\":\"Token config array\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"custom:access\":\"Only Governance\"},\"updateAssetPrice(address)\":{\"details\":\"This function should always be called before calling getPrice\",\"params\":{\"asset\":\"asset address\"}},\"updatePrice(address)\":{\"details\":\"This function should always be called before calling getUnderlyingPrice\",\"params\":{\"vToken\":\"vToken address\"}}},\"stateVariables\":{\"boundValidator\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nativeMarket\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vai\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"title\":\"ResilientOracle\",\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"OracleEnabled(address,uint256,bool)\":{\"notice\":\"Event emitted when an oracle is enabled or disabled\"},\"OracleSet(address,address,uint256)\":{\"notice\":\"Event emitted when an oracle is set\"}},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"boundValidator()\":{\"notice\":\"Bound validator contract address\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"enableOracle(address,uint8,bool)\":{\"notice\":\"Enables/ disables oracle for the input asset. Token config for the input asset **must** exist\"},\"getOracle(address,uint8)\":{\"notice\":\"Gets oracle and enabled status by asset address\"},\"getPrice(address)\":{\"notice\":\"Gets price of the asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Gets price of the underlying asset for a given vToken. Validation flow: - Check if the oracle is paused globally - Validate price from main oracle against pivot oracle - Validate price from fallback oracle against pivot oracle if the first validation failed - Validate price from main oracle against fallback oracle if the second validation failed In the case that the pivot oracle is not available but main price is available and validation is successful, main oracle price is returned.\"},\"nativeAsset()\":{\"notice\":\"Set this as asset address for Native token on each chain.\"},\"nativeMarket()\":{\"notice\":\"deprecated, keep it here just to maintain the storage layoutNative market address\"},\"pause()\":{\"notice\":\"Pauses oracle\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setOracle(address,address,uint8)\":{\"notice\":\"Sets oracle for a given asset and role.\"},\"setTokenConfig((address,address[3],bool[3]))\":{\"notice\":\"Sets/resets single token configs.\"},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"notice\":\"Batch sets token configs\"},\"unpause()\":{\"notice\":\"Unpauses oracle\"},\"updateAssetPrice(address)\":{\"notice\":\"Updates the pivot oracle price. Currently using TWAP\"},\"updatePrice(address)\":{\"notice\":\"Updates the TWAP pivot oracle price.\"},\"vai()\":{\"notice\":\"deprecated, keeip it here just to maintain the storage layoutVAI address\"}},\"notice\":\"The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets. DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly reported prices. If only one oracle is used, this creates a single point of failure and opens a vector for attacking the protocol. The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source. For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source. To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every market. The upper bound ratio represents the deviation between reported price (the price that\\u2019s being validated) and the anchor price (the price we are validating against) above which the reported price will be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below which the reported price will be invalidated. So for oracle price to be considered valid the below statement should be true: ``` anchorRatio = anchorPrice/reporterPrice isValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio ``` In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles. For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the oracle to be stagnant and treat it like it's disabled.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResilientOracle.sol\":\"ResilientOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ResilientOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/VBep20Interface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"./accessControl/AccessControlledV8.sol\\\";\\n\\n/**\\n * @title ResilientOracle\\n * @author Venus\\n * @notice The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets.\\n *\\n * DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly\\n * reported prices. If only one oracle is used, this creates a single point of failure and opens a vector\\n * for attacking the protocol.\\n *\\n * The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect\\n * the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle\\n * and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source.\\n *\\n * For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per\\n * vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot\\n * oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source.\\n *\\n * To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every\\n * market. The upper bound ratio represents the deviation between reported price (the price that\\u2019s being\\n * validated) and the anchor price (the price we are validating against) above which the reported price will\\n * be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below\\n * which the reported price will be invalidated. So for oracle price to be considered valid the below statement\\n * should be true:\\n\\n```\\nanchorRatio = anchorPrice/reporterPrice\\nisValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio\\n```\\n\\n * In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending\\n * on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may\\n * use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles.\\n *\\n * For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the\\n * oracle to be stagnant and treat it like it's disabled.\\n */\\ncontract ResilientOracle is Pausable, AccessControlledV8, ResilientOracleInterface {\\n    /**\\n     * @dev Oracle roles:\\n     * **main**: The most trustworthy price source\\n     * **pivot**: Price oracle used as a loose sanity checker\\n     * **fallback**: The backup source when main oracle price is invalidated\\n     */\\n    enum OracleRole {\\n        MAIN,\\n        PIVOT,\\n        FALLBACK\\n    }\\n\\n    struct TokenConfig {\\n        /// @notice asset address\\n        address asset;\\n        /// @notice `oracles` stores the oracles based on their role in the following order:\\n        /// [main, pivot, fallback],\\n        /// It can be indexed with the corresponding enum OracleRole value\\n        address[3] oracles;\\n        /// @notice `enableFlagsForOracles` stores the enabled state\\n        /// for each oracle in the same order as `oracles`\\n        bool[3] enableFlagsForOracles;\\n    }\\n\\n    uint256 public constant INVALID_PRICE = 0;\\n\\n    /// @notice deprecated, keep it here just to maintain the storage layout\\n    /// @notice Native market address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable nativeMarket;\\n\\n    /// @notice deprecated, keeip it here just to maintain the storage layout\\n    /// @notice VAI address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vai;\\n\\n    /// @notice Set this as asset address for Native token on each chain.\\n    address public immutable nativeAsset;\\n\\n    /// @notice Bound validator contract address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    BoundValidatorInterface public immutable boundValidator;\\n\\n    mapping(address => TokenConfig) private tokenConfigs;\\n\\n    event TokenConfigAdded(\\n        address indexed asset,\\n        address indexed mainOracle,\\n        address indexed pivotOracle,\\n        address fallbackOracle\\n    );\\n\\n    /// Event emitted when an oracle is set\\n    event OracleSet(address indexed asset, address indexed oracle, uint256 indexed role);\\n\\n    /// Event emitted when an oracle is enabled or disabled\\n    event OracleEnabled(address indexed asset, uint256 indexed role, bool indexed enable);\\n\\n    /**\\n     * @notice Checks whether an address is null or not\\n     */\\n    modifier notNullAddress(address someone) {\\n        if (someone == address(0)) revert(\\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks whether token config exists by checking whether asset is null address\\n     * @dev address can't be null, so it's suitable to be used to check the validity of the config\\n     * @param asset asset address\\n     */\\n    modifier checkTokenConfigExistence(address asset) {\\n        if (tokenConfigs[asset].asset == address(0)) revert(\\\"token config must exist\\\");\\n        _;\\n    }\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @dev nativeMarketAddress can be address(0) if on the chain we do not support native market\\n    ///      (e.g vETH on ethereum would not be supported, only vWETH)\\n    /// @param nativeAssetAddress The address of a native asset (for ethereum it would be WETH address)\\n    /// @param _boundValidator Address of the bound validator contract\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address nativeMarketAddress,\\n        address nativeAssetAddress,\\n        BoundValidatorInterface _boundValidator,\\n        address accessControlManager_\\n    ) notNullAddress(address(_boundValidator)) {\\n        nativeMarket = nativeMarketAddress;\\n        nativeAsset = nativeAssetAddress;\\n        vai = 0x0000000000000000000000000000000000000000;\\n        boundValidator = _boundValidator;\\n\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Pauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function pause() external {\\n        _checkAccessAllowed(\\\"pause()\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function unpause() external {\\n        _checkAccessAllowed(\\\"unpause()\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Batch sets token configs\\n     * @param tokenConfigs_ Token config array\\n     * @custom:access Only Governance\\n     * @custom:error Throws a length error if the length of the token configs array is 0\\n     */\\n    function setTokenConfigs(TokenConfig[] memory tokenConfigs_) external {\\n        if (tokenConfigs_.length == 0) revert(\\\"length can't be 0\\\");\\n        uint256 numTokenConfigs = tokenConfigs_.length;\\n        for (uint256 i; i < numTokenConfigs; ) {\\n            setTokenConfig(tokenConfigs_[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets oracle for a given asset and role.\\n     * @dev Supplied asset **must** exist and main oracle may not be null\\n     * @param asset Asset address\\n     * @param oracle Oracle address\\n     * @param role Oracle role\\n     * @custom:access Only Governance\\n     * @custom:error Null address error if main-role oracle address is null\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     * @custom:event Emits OracleSet event with asset address, oracle address and role of the oracle for the asset\\n     */\\n    function setOracle(\\n        address asset,\\n        address oracle,\\n        OracleRole role\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"setOracle(address,address,uint8)\\\");\\n        if (oracle == address(0) && role == OracleRole.MAIN) revert(\\\"can't set zero address to main oracle\\\");\\n        tokenConfigs[asset].oracles[uint256(role)] = oracle;\\n        emit OracleSet(asset, oracle, uint256(role));\\n    }\\n\\n    /**\\n     * @notice Enables/ disables oracle for the input asset. Token config for the input asset **must** exist\\n     * @dev Configuration for the asset **must** already exist and the asset cannot be 0 address\\n     * @param asset Asset address\\n     * @param role Oracle role\\n     * @param enable Enabled boolean of the oracle\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     */\\n    function enableOracle(\\n        address asset,\\n        OracleRole role,\\n        bool enable\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"enableOracle(address,uint8,bool)\\\");\\n        tokenConfigs[asset].enableFlagsForOracles[uint256(role)] = enable;\\n        emit OracleEnabled(asset, uint256(role), enable);\\n    }\\n\\n    /**\\n     * @notice Updates the TWAP pivot oracle price.\\n     * @dev This function should always be called before calling getUnderlyingPrice\\n     * @param vToken vToken address\\n     */\\n    function updatePrice(address vToken) external override {\\n        address asset = _getUnderlyingAsset(vToken);\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the pivot oracle price. Currently using TWAP\\n     * @dev This function should always be called before calling getPrice\\n     * @param asset asset address\\n     */\\n    function updateAssetPrice(address asset) external {\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets token config by asset address\\n     * @param asset asset address\\n     * @return tokenConfig Config for the asset\\n     */\\n    function getTokenConfig(address asset) external view returns (TokenConfig memory) {\\n        return tokenConfigs[asset];\\n    }\\n\\n    /**\\n     * @notice Gets price of the underlying asset for a given vToken. Validation flow:\\n     * - Check if the oracle is paused globally\\n     * - Validate price from main oracle against pivot oracle\\n     * - Validate price from fallback oracle against pivot oracle if the first validation failed\\n     * - Validate price from main oracle against fallback oracle if the second validation failed\\n     * In the case that the pivot oracle is not available but main price is available and validation is successful,\\n     * main oracle price is returned.\\n     * @param vToken vToken address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getUnderlyingPrice(address vToken) public view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n\\n        address asset = _getUnderlyingAsset(vToken);\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Gets price of the asset\\n     * @param asset asset address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getPrice(address asset) external view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Sets/resets single token configs.\\n     * @dev main oracle **must not** be a null address\\n     * @param tokenConfig Token config struct\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress is thrown if asset address is null\\n     * @custom:error NotNullAddress is thrown if main-role oracle address for asset is null\\n     * @custom:event Emits TokenConfigAdded event when the asset config is set successfully by the authorized account\\n     */\\n    function setTokenConfig(\\n        TokenConfig memory tokenConfig\\n    ) public notNullAddress(tokenConfig.asset) notNullAddress(tokenConfig.oracles[uint256(OracleRole.MAIN)]) {\\n        _checkAccessAllowed(\\\"setTokenConfig(TokenConfig)\\\");\\n\\n        tokenConfigs[tokenConfig.asset] = tokenConfig;\\n        emit TokenConfigAdded(\\n            tokenConfig.asset,\\n            tokenConfig.oracles[uint256(OracleRole.MAIN)],\\n            tokenConfig.oracles[uint256(OracleRole.PIVOT)],\\n            tokenConfig.oracles[uint256(OracleRole.FALLBACK)]\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets oracle and enabled status by asset address\\n     * @param asset asset address\\n     * @param role Oracle role\\n     * @return oracle Oracle address based on role\\n     * @return enabled Enabled flag of the oracle based on token config\\n     */\\n    function getOracle(address asset, OracleRole role) public view returns (address oracle, bool enabled) {\\n        oracle = tokenConfigs[asset].oracles[uint256(role)];\\n        enabled = tokenConfigs[asset].enableFlagsForOracles[uint256(role)];\\n    }\\n\\n    function _getPrice(address asset) internal view returns (uint256) {\\n        uint256 pivotPrice = INVALID_PRICE;\\n\\n        // Get pivot oracle price, Invalid price if not available or error\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracleEnabled && pivotOracle != address(0)) {\\n            try OracleInterface(pivotOracle).getPrice(asset) returns (uint256 pricePivot) {\\n                pivotPrice = pricePivot;\\n            } catch {}\\n        }\\n\\n        // Compare main price and pivot price, return main price and if validation was successful\\n        // note: In case pivot oracle is not available but main price is available and\\n        // validation is successful, the main oracle price is returned.\\n        (uint256 mainPrice, bool validatedPivotMain) = _getMainOraclePrice(\\n            asset,\\n            pivotPrice,\\n            pivotOracleEnabled && pivotOracle != address(0)\\n        );\\n        if (mainPrice != INVALID_PRICE && validatedPivotMain) return mainPrice;\\n\\n        // Compare fallback and pivot if main oracle comparision fails with pivot\\n        // Return fallback price when fallback price is validated successfully with pivot oracle\\n        (uint256 fallbackPrice, bool validatedPivotFallback) = _getFallbackOraclePrice(asset, pivotPrice);\\n        if (fallbackPrice != INVALID_PRICE && validatedPivotFallback) return fallbackPrice;\\n\\n        // Lastly compare main price and fallback price\\n        if (\\n            mainPrice != INVALID_PRICE &&\\n            fallbackPrice != INVALID_PRICE &&\\n            boundValidator.validatePriceWithAnchorPrice(asset, mainPrice, fallbackPrice)\\n        ) {\\n            return mainPrice;\\n        }\\n\\n        revert(\\\"invalid resilient oracle price\\\");\\n    }\\n\\n    function getUnderlyingPrices(address[] memory cTokens) public view returns (uint256[] memory) {\\n        uint256 length = cTokens.length;\\n        uint256[] memory results = new uint256[](length);\\n        for (uint256 i; i < length; ++i) {\\n            results[i] = getUnderlyingPrice(cTokens[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Gets a price for the provided asset\\n     * @dev This function won't revert when price is 0, because the fallback oracle may still be\\n     * able to fetch a correct price\\n     * @param asset asset address\\n     * @param pivotPrice Pivot oracle price\\n     * @param pivotEnabled If pivot oracle is not empty and enabled\\n     * @return price USD price in scaled decimals\\n     * e.g. asset decimals is 8 then price is returned as 10**18 * 10**(18-8) = 10**28 decimals\\n     * @return pivotValidated Boolean representing if the validation of main oracle price\\n     * and pivot oracle price were successful\\n     * @custom:error Invalid price error is thrown if main oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if main oracle is not enabled or main oracle\\n     * address is null\\n     */\\n    function _getMainOraclePrice(\\n        address asset,\\n        uint256 pivotPrice,\\n        bool pivotEnabled\\n    ) internal view returns (uint256, bool) {\\n        (address mainOracle, bool mainOracleEnabled) = getOracle(asset, OracleRole.MAIN);\\n        if (mainOracleEnabled && mainOracle != address(0)) {\\n            try OracleInterface(mainOracle).getPrice(asset) returns (uint256 mainOraclePrice) {\\n                if (!pivotEnabled) {\\n                    return (mainOraclePrice, true);\\n                }\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (mainOraclePrice, false);\\n                }\\n                return (\\n                    mainOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, mainOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function won't revert when the price is 0 because getPrice checks if price is > 0\\n     * @param asset asset address\\n     * @return price USD price in 18 decimals\\n     * @return pivotValidated Boolean representing if the validation of fallback oracle price\\n     * and pivot oracle price were successfull\\n     * @custom:error Invalid price error is thrown if fallback oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if fallback oracle is not enabled or fallback oracle\\n     * address is null\\n     */\\n    function _getFallbackOraclePrice(address asset, uint256 pivotPrice) private view returns (uint256, bool) {\\n        (address fallbackOracle, bool fallbackEnabled) = getOracle(asset, OracleRole.FALLBACK);\\n        if (fallbackEnabled && fallbackOracle != address(0)) {\\n            try OracleInterface(fallbackOracle).getPrice(asset) returns (uint256 fallbackOraclePrice) {\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (fallbackOraclePrice, false);\\n                }\\n                return (\\n                    fallbackOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, fallbackOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function returns the underlying asset of a vToken\\n     * @param vToken vToken address\\n     * @return asset underlying asset address\\n     */\\n    function _getUnderlyingAsset(address vToken) private view notNullAddress(vToken) returns (address asset) {\\n        if (vToken == nativeMarket) {\\n            asset = nativeAsset;\\n        } else {\\n            asset = VBep20Interface(vToken).underlying();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x03b2a24e55ac63bf8c278730f0aa95ce6e3afd95d713624f9a9094fdea18488d\",\"license\":\"BSD-3-Clause\"},\"contracts/accessControl/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Ownable2Step {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84f9e39a96f312e4dcfba6b50fca2cb9d5f857fd60cba5aa828e78f9b873cf6e\",\"license\":\"BSD-3-Clause\"},\"contracts/accessControl/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface VBep20Interface is IERC20Metadata {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6e71c3df86501df5c0e4bace1333c0c91f9f9cced252a54fb99eeda219b789d5\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516122b73803806122b78339810160408190526100309161021f565b6000805460ff19169055610043336100d0565b816001600160a01b03811661009f5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f2061646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0380861660805284811660c052600060a052831660e0526100c6826100ec565b505050505061027e565b600180546001600160a01b03191690556100e9816101b1565b50565b6001600160a01b0381166101505760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610096565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6001600160a01b03811681146100e957600080fd5b6000806000806080858703121561023557600080fd5b84516102408161020a565b60208601519094506102518161020a565b60408601519093506102628161020a565b60608601519092506102738161020a565b939692955090935050565b60805160a05160c05160e051611fdd6102da600039600081816101d301528181611264015281816115b2015261172201526000818161029901526113e3015260006103890152600081816102d001526113aa0152611fdd6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638456cb59116100de578063b4a0bdf311610097578063cb67e3b111610071578063cb67e3b1146103ab578063e30c3978146103cb578063f2fde38b146103dc578063fc57d4df146103ef57600080fd5b8063b4a0bdf314610360578063b62cad6914610371578063b62e4c921461038457600080fd5b80638456cb59146102c35780638a2f7f6d146102cb5780638b855da4146102f25780638da5cb5b1461032457806396e85ced1461033a578063a6b1344a1461034d57600080fd5b806348a1371b1161014b5780635c975abb116101255780635c975abb14610276578063715018a61461028c57806374d32ad41461029457806379ba5097146102bb57600080fd5b806348a1371b1461023b5780634b932b8f1461025b5780634bf39cba1461026e57600080fd5b80630e32cb86146101935780632cfa3871146101a8578063333a21b0146101bb57806333d33494146101ce5780633f4ba83a1461021257806341976e091461021a575b600080fd5b6101a66101a13660046119ad565b610402565b005b6101a66101b6366004611b5e565b610416565b6101a66101c9366004611c04565b61049c565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66105ee565b61022d6102283660046119ad565b610622565b604051908152602001610209565b61024e610249366004611c20565b610685565b6040516102099190611cba565b6101a6610269366004611d12565b61072b565b61022d600081565b60005460ff166040519015158152602001610209565b6101a66108a1565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a66108b3565b6101a661092a565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b610305610300366004611d5b565b61095a565b604080516001600160a01b039093168352901515602083015201610209565b60005461010090046001600160a01b03166101f5565b6101a66103483660046119ad565b6109fc565b6101a661035b366004611d90565b610aa7565b6002546001600160a01b03166101f5565b6101a661037f3660046119ad565b610ca9565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6103be6103b93660046119ad565b610d45565b6040516102099190611dd7565b6001546001600160a01b03166101f5565b6101a66103ea3660046119ad565b610e1a565b61022d6103fd3660046119ad565b610e91565b61040a610f02565b61041381610f62565b50565b80516000036104605760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b805160005b818110156104975761048f83828151811061048257610482611e52565b602002602001015161049c565b600101610465565b505050565b80516001600160a01b0381166104c45760405162461bcd60e51b815260040161045790611e68565b6020820151516001600160a01b0381166104f05760405162461bcd60e51b815260040161045790611e68565b61052e6040518060400160405280601b81526020017f736574546f6b656e436f6e66696728546f6b656e436f6e666967290000000000815250611027565b82516001600160a01b039081166000908152603460209081526040909120855181546001600160a01b0319169316929092178255840151849190610578906001830190600361184b565b50604082015161058e90600483019060036118a3565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61061860405180604001604052806009815260200168756e7061757365282960b81b815250611027565b6106206110c5565b565b6000805460ff16156106765760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610457565b61067f82611117565b92915050565b805160609060008167ffffffffffffffff8111156106a5576106a56119ca565b6040519080825280602002602001820160405280156106ce578160200160208202803683370190505b50905060005b82811015610723576106fe8582815181106106f1576106f1611e52565b6020026020010151610e91565b82828151811061071057610710611e52565b60209081029190910101526001016106d4565b509392505050565b826001600160a01b0381166107525760405162461bcd60e51b815260040161045790611e68565b6001600160a01b038085166000908152603460205260409020548591166107b55760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610457565b6107f36040518060400160405280602081526020017f656e61626c654f7261636c6528616464726573732c75696e74382c626f6f6c29815250611027565b6001600160a01b0385166000908152603460205260409020839060040185600281111561082257610822611e97565b6003811061083257610832611e52565b602091828204019190066101000a81548160ff02191690831515021790555082151584600281111561086657610866611e97565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b6108a9610f02565b6106206000611329565b60015433906001600160a01b031681146109215760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610457565b61041381611329565b610952604051806040016040528060078152602001667061757365282960c81b815250611027565b610620611342565b6001600160a01b0382166000908152603460205260408120819060010183600281111561098957610989611e97565b6003811061099957610999611e52565b01546001600160a01b038581166000908152603460205260409020911692506004018360028111156109cd576109cd611e97565b600381106109dd576109dd611e52565b602091828204019190069054906101000a900460ff1690509250929050565b6000610a078261137f565b9050600080610a1783600161095a565b90925090506001600160a01b03821615801590610a315750805b15610aa15760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610a9a575060408051601f3d908101601f19168201909252610a9791810190611ead565b60015b15610aa157505b50505050565b826001600160a01b038116610ace5760405162461bcd60e51b815260040161045790611e68565b6001600160a01b03808516600090815260346020526040902054859116610b315760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610457565b610b6f6040518060400160405280602081526020017f7365744f7261636c6528616464726573732c616464726573732c75696e743829815250611027565b6001600160a01b038416158015610b9757506000836002811115610b9557610b95611e97565b145b15610bf25760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b6064820152608401610457565b6001600160a01b03851660009081526034602052604090208490600101846002811115610c2157610c21611e97565b60038110610c3157610c31611e52565b0180546001600160a01b0319166001600160a01b0392909216919091179055826002811115610c6257610c62611e97565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600080610cb783600161095a565b90925090506001600160a01b03821615801590610cd15750805b156104975760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610d3a575060408051601f3d908101601f19168201909252610d3791810190611ead565b60015b156104975750505050565b610d4d611930565b6001600160a01b038281166000908152603460209081526040918290208251606080820185528254909516815283519485019384905293909291840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610d95575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610dda5790505050505050815250509050919050565b610e22610f02565b600180546001600160a01b0383166001600160a01b03199091168117909155610e596000546001600160a01b036101009091041690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000805460ff1615610ee55760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610457565b6000610ef08361137f565b9050610efb81611117565b9392505050565b6000546001600160a01b036101009091041633146106205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610457565b6001600160a01b038116610fc65760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610457565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b6002546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab9061105a9033908690600401611f0c565b602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190611f38565b9050806110c157333083604051634a3fa29360e01b815260040161045793929190611f55565b5050565b6110cd611471565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080808061112785600161095a565b9150915080801561114057506001600160a01b03821615155b156111af576040516341976e0960e01b81526001600160a01b0386811660048301528316906341976e0990602401602060405180830381865afa9250505080156111a7575060408051601f3d908101601f191682019092526111a491810190611ead565b60015b156111af5792505b6000806111d187868580156111cc57506001600160a01b03871615155b6114ba565b91509150600082141580156111e35750805b156111f2575095945050505050565b6000806111ff898861163d565b91509150600082141580156112115750805b156112225750979650505050505050565b831580159061123057508115155b80156112cf5750604051634be3819f60e11b81526001600160a01b038a8116600483015260248201869052604482018490527f000000000000000000000000000000000000000000000000000000000000000016906397c7033e90606401602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190611f38565b156112e1575091979650505050505050565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c6520707269636500006044820152606401610457565b600180546001600160a01b0319169055610413816117ac565b61134a611805565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110fa3390565b6000816001600160a01b0381166113a85760405162461bcd60e51b815260040161045790611e68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611409577f0000000000000000000000000000000000000000000000000000000000000000915061146b565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb9190611f8a565b50919050565b60005460ff166106205760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610457565b6000806000806114cb87600061095a565b915091508080156114e457506001600160a01b03821615155b1561162b576040516341976e0960e01b81526001600160a01b0388811660048301528316906341976e0990602401602060405180830381865afa92505050801561154b575060408051601f3d908101601f1916820190925261154891810190611ead565b60015b61155d57600080935093505050611635565b8561157057935060019250611635915050565b8661158357935060009250611635915050565b604051634be3819f60e11b81526001600160a01b038981166004830152602482018390526044820189905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190611f38565b94509450505050611635565b6000809350935050505b935093915050565b60008060008061164e86600261095a565b9150915080801561166757506001600160a01b03821615155b1561179b576040516341976e0960e01b81526001600160a01b0387811660048301528316906341976e0990602401602060405180830381865afa9250505080156116ce575060408051601f3d908101601f191682019092526116cb91810190611ead565b60015b6116e0576000809350935050506117a5565b856116f3579350600092506117a5915050565b604051634be3819f60e11b81526001600160a01b038881166004830152602482018390526044820188905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190611f38565b945094505050506117a5565b6000809350935050505b9250929050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff16156106205760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610457565b8260038101928215611893579160200282015b8281111561189357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061185e565b5061189f929150611965565b5090565b6001830191839082156118935791602002820160005b838211156118f657835183826101000a81548160ff02191690831515021790555092602001926001016020816000010492830192600103026118b9565b80156119235782816101000a81549060ff02191690556001016020816000010492830192600103026118f6565b505061189f929150611965565b604051806060016040528060006001600160a01b0316815260200161195361197a565b815260200161196061197a565b905290565b5b8082111561189f5760008155600101611966565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461041357600080fd5b6000602082840312156119bf57600080fd5b8135610efb81611998565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a0357611a036119ca565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3257611a326119ca565b604052919050565b600067ffffffffffffffff821115611a5457611a546119ca565b5060051b60200190565b801515811461041357600080fd5b600082601f830112611a7d57600080fd5b611a856119e0565b806060840185811115611a9757600080fd5b845b81811015611aba578035611aac81611a5e565b845260209384019301611a99565b509095945050505050565b600060e08284031215611ad757600080fd5b611adf6119e0565b90508135611aec81611998565b81526020603f83018413611aff57600080fd5b611b076119e0565b806080850186811115611b1957600080fd5b602086015b81811015611b3e578035611b3181611998565b8452928401928401611b1e565b50816020860152611b4f8782611a6c565b60408601525050505092915050565b60006020808385031215611b7157600080fd5b823567ffffffffffffffff811115611b8857600080fd5b8301601f81018513611b9957600080fd5b8035611bac611ba782611a3a565b611a09565b8082825260208201915060e0602060e08502860101935088841115611bd057600080fd5b6020850194505b83851015611bf857611be98986611ac5565b83529384019391850191611bd7565b50979650505050505050565b600060e08284031215611c1657600080fd5b610efb8383611ac5565b60006020808385031215611c3357600080fd5b823567ffffffffffffffff811115611c4a57600080fd5b8301601f81018513611c5b57600080fd5b8035611c69611ba782611a3a565b81815260059190911b82018301908381019087831115611c8857600080fd5b928401925b82841015611caf578335611ca081611998565b82529284019290840190611c8d565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cf257835183529284019291840191600101611cd6565b50909695505050505050565b803560038110611d0d57600080fd5b919050565b600080600060608486031215611d2757600080fd5b8335611d3281611998565b9250611d4060208501611cfe565b91506040840135611d5081611a5e565b809150509250925092565b60008060408385031215611d6e57600080fd5b8235611d7981611998565b9150611d8760208401611cfe565b90509250929050565b600080600060608486031215611da557600080fd5b8335611db081611998565b92506020840135611dc081611998565b9150611dce60408501611cfe565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b6003811015611e18578251851682529183019190830190600101611df9565b505050604085015191506080840160005b6003811015611e48578351151582529282019290820190600101611e29565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611ebf57600080fd5b5051919050565b6000815180845260005b81811015611eec57602081850181015186830182015201611ed0565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0383168152604060208201819052600090611f3090830184611ec6565b949350505050565b600060208284031215611f4a57600080fd5b8151610efb81611a5e565b6001600160a01b03848116825283166020820152606060408201819052600090611f8190830184611ec6565b95945050505050565b600060208284031215611f9c57600080fd5b8151610efb8161199856fea264697066735822122069d6246e34697f9d9c3a4f0877a174dd14a50df2c68af45d4573d362d182cfe064736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638456cb59116100de578063b4a0bdf311610097578063cb67e3b111610071578063cb67e3b1146103ab578063e30c3978146103cb578063f2fde38b146103dc578063fc57d4df146103ef57600080fd5b8063b4a0bdf314610360578063b62cad6914610371578063b62e4c921461038457600080fd5b80638456cb59146102c35780638a2f7f6d146102cb5780638b855da4146102f25780638da5cb5b1461032457806396e85ced1461033a578063a6b1344a1461034d57600080fd5b806348a1371b1161014b5780635c975abb116101255780635c975abb14610276578063715018a61461028c57806374d32ad41461029457806379ba5097146102bb57600080fd5b806348a1371b1461023b5780634b932b8f1461025b5780634bf39cba1461026e57600080fd5b80630e32cb86146101935780632cfa3871146101a8578063333a21b0146101bb57806333d33494146101ce5780633f4ba83a1461021257806341976e091461021a575b600080fd5b6101a66101a13660046119ad565b610402565b005b6101a66101b6366004611b5e565b610416565b6101a66101c9366004611c04565b61049c565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66105ee565b61022d6102283660046119ad565b610622565b604051908152602001610209565b61024e610249366004611c20565b610685565b6040516102099190611cba565b6101a6610269366004611d12565b61072b565b61022d600081565b60005460ff166040519015158152602001610209565b6101a66108a1565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a66108b3565b6101a661092a565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b610305610300366004611d5b565b61095a565b604080516001600160a01b039093168352901515602083015201610209565b60005461010090046001600160a01b03166101f5565b6101a66103483660046119ad565b6109fc565b6101a661035b366004611d90565b610aa7565b6002546001600160a01b03166101f5565b6101a661037f3660046119ad565b610ca9565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6103be6103b93660046119ad565b610d45565b6040516102099190611dd7565b6001546001600160a01b03166101f5565b6101a66103ea3660046119ad565b610e1a565b61022d6103fd3660046119ad565b610e91565b61040a610f02565b61041381610f62565b50565b80516000036104605760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b805160005b818110156104975761048f83828151811061048257610482611e52565b602002602001015161049c565b600101610465565b505050565b80516001600160a01b0381166104c45760405162461bcd60e51b815260040161045790611e68565b6020820151516001600160a01b0381166104f05760405162461bcd60e51b815260040161045790611e68565b61052e6040518060400160405280601b81526020017f736574546f6b656e436f6e66696728546f6b656e436f6e666967290000000000815250611027565b82516001600160a01b039081166000908152603460209081526040909120855181546001600160a01b0319169316929092178255840151849190610578906001830190600361184b565b50604082015161058e90600483019060036118a3565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61061860405180604001604052806009815260200168756e7061757365282960b81b815250611027565b6106206110c5565b565b6000805460ff16156106765760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610457565b61067f82611117565b92915050565b805160609060008167ffffffffffffffff8111156106a5576106a56119ca565b6040519080825280602002602001820160405280156106ce578160200160208202803683370190505b50905060005b82811015610723576106fe8582815181106106f1576106f1611e52565b6020026020010151610e91565b82828151811061071057610710611e52565b60209081029190910101526001016106d4565b509392505050565b826001600160a01b0381166107525760405162461bcd60e51b815260040161045790611e68565b6001600160a01b038085166000908152603460205260409020548591166107b55760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610457565b6107f36040518060400160405280602081526020017f656e61626c654f7261636c6528616464726573732c75696e74382c626f6f6c29815250611027565b6001600160a01b0385166000908152603460205260409020839060040185600281111561082257610822611e97565b6003811061083257610832611e52565b602091828204019190066101000a81548160ff02191690831515021790555082151584600281111561086657610866611e97565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b6108a9610f02565b6106206000611329565b60015433906001600160a01b031681146109215760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610457565b61041381611329565b610952604051806040016040528060078152602001667061757365282960c81b815250611027565b610620611342565b6001600160a01b0382166000908152603460205260408120819060010183600281111561098957610989611e97565b6003811061099957610999611e52565b01546001600160a01b038581166000908152603460205260409020911692506004018360028111156109cd576109cd611e97565b600381106109dd576109dd611e52565b602091828204019190069054906101000a900460ff1690509250929050565b6000610a078261137f565b9050600080610a1783600161095a565b90925090506001600160a01b03821615801590610a315750805b15610aa15760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610a9a575060408051601f3d908101601f19168201909252610a9791810190611ead565b60015b15610aa157505b50505050565b826001600160a01b038116610ace5760405162461bcd60e51b815260040161045790611e68565b6001600160a01b03808516600090815260346020526040902054859116610b315760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610457565b610b6f6040518060400160405280602081526020017f7365744f7261636c6528616464726573732c616464726573732c75696e743829815250611027565b6001600160a01b038416158015610b9757506000836002811115610b9557610b95611e97565b145b15610bf25760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b6064820152608401610457565b6001600160a01b03851660009081526034602052604090208490600101846002811115610c2157610c21611e97565b60038110610c3157610c31611e52565b0180546001600160a01b0319166001600160a01b0392909216919091179055826002811115610c6257610c62611e97565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600080610cb783600161095a565b90925090506001600160a01b03821615801590610cd15750805b156104975760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610d3a575060408051601f3d908101601f19168201909252610d3791810190611ead565b60015b156104975750505050565b610d4d611930565b6001600160a01b038281166000908152603460209081526040918290208251606080820185528254909516815283519485019384905293909291840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610d95575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610dda5790505050505050815250509050919050565b610e22610f02565b600180546001600160a01b0383166001600160a01b03199091168117909155610e596000546001600160a01b036101009091041690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000805460ff1615610ee55760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610457565b6000610ef08361137f565b9050610efb81611117565b9392505050565b6000546001600160a01b036101009091041633146106205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610457565b6001600160a01b038116610fc65760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610457565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0910160405180910390a15050565b6002546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab9061105a9033908690600401611f0c565b602060405180830381865afa158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190611f38565b9050806110c157333083604051634a3fa29360e01b815260040161045793929190611f55565b5050565b6110cd611471565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080808061112785600161095a565b9150915080801561114057506001600160a01b03821615155b156111af576040516341976e0960e01b81526001600160a01b0386811660048301528316906341976e0990602401602060405180830381865afa9250505080156111a7575060408051601f3d908101601f191682019092526111a491810190611ead565b60015b156111af5792505b6000806111d187868580156111cc57506001600160a01b03871615155b6114ba565b91509150600082141580156111e35750805b156111f2575095945050505050565b6000806111ff898861163d565b91509150600082141580156112115750805b156112225750979650505050505050565b831580159061123057508115155b80156112cf5750604051634be3819f60e11b81526001600160a01b038a8116600483015260248201869052604482018490527f000000000000000000000000000000000000000000000000000000000000000016906397c7033e90606401602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190611f38565b156112e1575091979650505050505050565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c6520707269636500006044820152606401610457565b600180546001600160a01b0319169055610413816117ac565b61134a611805565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110fa3390565b6000816001600160a01b0381166113a85760405162461bcd60e51b815260040161045790611e68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611409577f0000000000000000000000000000000000000000000000000000000000000000915061146b565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb9190611f8a565b50919050565b60005460ff166106205760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610457565b6000806000806114cb87600061095a565b915091508080156114e457506001600160a01b03821615155b1561162b576040516341976e0960e01b81526001600160a01b0388811660048301528316906341976e0990602401602060405180830381865afa92505050801561154b575060408051601f3d908101601f1916820190925261154891810190611ead565b60015b61155d57600080935093505050611635565b8561157057935060019250611635915050565b8661158357935060009250611635915050565b604051634be3819f60e11b81526001600160a01b038981166004830152602482018390526044820189905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f9190611f38565b94509450505050611635565b6000809350935050505b935093915050565b60008060008061164e86600261095a565b9150915080801561166757506001600160a01b03821615155b1561179b576040516341976e0960e01b81526001600160a01b0387811660048301528316906341976e0990602401602060405180830381865afa9250505080156116ce575060408051601f3d908101601f191682019092526116cb91810190611ead565b60015b6116e0576000809350935050506117a5565b856116f3579350600092506117a5915050565b604051634be3819f60e11b81526001600160a01b038881166004830152602482018390526044820188905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190611f38565b945094505050506117a5565b6000809350935050505b9250929050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff16156106205760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610457565b8260038101928215611893579160200282015b8281111561189357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061185e565b5061189f929150611965565b5090565b6001830191839082156118935791602002820160005b838211156118f657835183826101000a81548160ff02191690831515021790555092602001926001016020816000010492830192600103026118b9565b80156119235782816101000a81549060ff02191690556001016020816000010492830192600103026118f6565b505061189f929150611965565b604051806060016040528060006001600160a01b0316815260200161195361197a565b815260200161196061197a565b905290565b5b8082111561189f5760008155600101611966565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461041357600080fd5b6000602082840312156119bf57600080fd5b8135610efb81611998565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a0357611a036119ca565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3257611a326119ca565b604052919050565b600067ffffffffffffffff821115611a5457611a546119ca565b5060051b60200190565b801515811461041357600080fd5b600082601f830112611a7d57600080fd5b611a856119e0565b806060840185811115611a9757600080fd5b845b81811015611aba578035611aac81611a5e565b845260209384019301611a99565b509095945050505050565b600060e08284031215611ad757600080fd5b611adf6119e0565b90508135611aec81611998565b81526020603f83018413611aff57600080fd5b611b076119e0565b806080850186811115611b1957600080fd5b602086015b81811015611b3e578035611b3181611998565b8452928401928401611b1e565b50816020860152611b4f8782611a6c565b60408601525050505092915050565b60006020808385031215611b7157600080fd5b823567ffffffffffffffff811115611b8857600080fd5b8301601f81018513611b9957600080fd5b8035611bac611ba782611a3a565b611a09565b8082825260208201915060e0602060e08502860101935088841115611bd057600080fd5b6020850194505b83851015611bf857611be98986611ac5565b83529384019391850191611bd7565b50979650505050505050565b600060e08284031215611c1657600080fd5b610efb8383611ac5565b60006020808385031215611c3357600080fd5b823567ffffffffffffffff811115611c4a57600080fd5b8301601f81018513611c5b57600080fd5b8035611c69611ba782611a3a565b81815260059190911b82018301908381019087831115611c8857600080fd5b928401925b82841015611caf578335611ca081611998565b82529284019290840190611c8d565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cf257835183529284019291840191600101611cd6565b50909695505050505050565b803560038110611d0d57600080fd5b919050565b600080600060608486031215611d2757600080fd5b8335611d3281611998565b9250611d4060208501611cfe565b91506040840135611d5081611a5e565b809150509250925092565b60008060408385031215611d6e57600080fd5b8235611d7981611998565b9150611d8760208401611cfe565b90509250929050565b600080600060608486031215611da557600080fd5b8335611db081611998565b92506020840135611dc081611998565b9150611dce60408501611cfe565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b6003811015611e18578251851682529183019190830190600101611df9565b505050604085015191506080840160005b6003811015611e48578351151582529282019290820190600101611e29565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611ebf57600080fd5b5051919050565b6000815180845260005b81811015611eec57602081850181015186830182015201611ed0565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0383168152604060208201819052600090611f3090830184611ec6565b949350505050565b600060208284031215611f4a57600080fd5b8151610efb81611a5e565b6001600160a01b03848116825283166020820152606060408201819052600090611f8190830184611ec6565b95945050505050565b600060208284031215611f9c57600080fd5b8151610efb8161199856fea264697066735822122069d6246e34697f9d9c3a4f0877a174dd14a50df2c68af45d4573d362d182cfe064736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "nativeMarketAddress can be address(0) if on the chain we do not support native market      (e.g vETH on ethereum would not be supported, only vWETH)",
        "params": {
          "_boundValidator": "Address of the bound validator contract",
          "nativeAssetAddress": "The address of a native asset (for ethereum it would be WETH address)"
        }
      },
      "enableOracle(address,uint8,bool)": {
        "custom:access": "Only Governance",
        "custom:error": "NotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set",
        "details": "Configuration for the asset **must** already exist and the asset cannot be 0 address",
        "params": {
          "asset": "Asset address",
          "enable": "Enabled boolean of the oracle",
          "role": "Oracle role"
        }
      },
      "getOracle(address,uint8)": {
        "params": {
          "asset": "asset address",
          "role": "Oracle role"
        },
        "returns": {
          "enabled": "Enabled flag of the oracle based on token config",
          "oracle": "Oracle address based on role"
        }
      },
      "getPrice(address)": {
        "custom:error": "Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid",
        "params": {
          "asset": "asset address"
        },
        "returns": {
          "_0": "price USD price in scaled decimal places."
        }
      },
      "getTokenConfig(address)": {
        "details": "Gets token config by asset address",
        "params": {
          "asset": "asset address"
        },
        "returns": {
          "_0": "tokenConfig Config for the asset"
        }
      },
      "getUnderlyingPrice(address)": {
        "custom:error": "Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid",
        "params": {
          "vToken": "vToken address"
        },
        "returns": {
          "_0": "price USD price in scaled decimal places."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "custom:access": "Only Governance"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setOracle(address,address,uint8)": {
        "custom:access": "Only Governance",
        "custom:error": "Null address error if main-role oracle address is nullNotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set",
        "custom:event": "Emits OracleSet event with asset address, oracle address and role of the oracle for the asset",
        "details": "Supplied asset **must** exist and main oracle may not be null",
        "params": {
          "asset": "Asset address",
          "oracle": "Oracle address",
          "role": "Oracle role"
        }
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "custom:access": "Only Governance",
        "custom:error": "NotNullAddress is thrown if asset address is nullNotNullAddress is thrown if main-role oracle address for asset is null",
        "custom:event": "Emits TokenConfigAdded event when the asset config is set successfully by the authorized account",
        "details": "main oracle **must not** be a null address",
        "params": {
          "tokenConfig": "Token config struct"
        }
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "custom:access": "Only Governance",
        "custom:error": "Throws a length error if the length of the token configs array is 0",
        "params": {
          "tokenConfigs_": "Token config array"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "custom:access": "Only Governance"
      },
      "updateAssetPrice(address)": {
        "details": "This function should always be called before calling getPrice",
        "params": {
          "asset": "asset address"
        }
      },
      "updatePrice(address)": {
        "details": "This function should always be called before calling getUnderlyingPrice",
        "params": {
          "vToken": "vToken address"
        }
      }
    },
    "stateVariables": {
      "boundValidator": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nativeMarket": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vai": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "title": "ResilientOracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "OracleEnabled(address,uint256,bool)": {
        "notice": "Event emitted when an oracle is enabled or disabled"
      },
      "OracleSet(address,address,uint256)": {
        "notice": "Event emitted when an oracle is set"
      }
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "boundValidator()": {
        "notice": "Bound validator contract address"
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "enableOracle(address,uint8,bool)": {
        "notice": "Enables/ disables oracle for the input asset. Token config for the input asset **must** exist"
      },
      "getOracle(address,uint8)": {
        "notice": "Gets oracle and enabled status by asset address"
      },
      "getPrice(address)": {
        "notice": "Gets price of the asset"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Gets price of the underlying asset for a given vToken. Validation flow: - Check if the oracle is paused globally - Validate price from main oracle against pivot oracle - Validate price from fallback oracle against pivot oracle if the first validation failed - Validate price from main oracle against fallback oracle if the second validation failed In the case that the pivot oracle is not available but main price is available and validation is successful, main oracle price is returned."
      },
      "nativeAsset()": {
        "notice": "Set this as asset address for Native token on each chain."
      },
      "nativeMarket()": {
        "notice": "deprecated, keep it here just to maintain the storage layoutNative market address"
      },
      "pause()": {
        "notice": "Pauses oracle"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setOracle(address,address,uint8)": {
        "notice": "Sets oracle for a given asset and role."
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "notice": "Sets/resets single token configs."
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "notice": "Batch sets token configs"
      },
      "unpause()": {
        "notice": "Unpauses oracle"
      },
      "updateAssetPrice(address)": {
        "notice": "Updates the pivot oracle price. Currently using TWAP"
      },
      "updatePrice(address)": {
        "notice": "Updates the TWAP pivot oracle price."
      },
      "vai()": {
        "notice": "deprecated, keeip it here just to maintain the storage layoutVAI address"
      }
    },
    "notice": "The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets. DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly reported prices. If only one oracle is used, this creates a single point of failure and opens a vector for attacking the protocol. The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source. For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source. To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every market. The upper bound ratio represents the deviation between reported price (the price that’s being validated) and the anchor price (the price we are validating against) above which the reported price will be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below which the reported price will be invalidated. So for oracle price to be considered valid the below statement should be true: ``` anchorRatio = anchorPrice/reporterPrice isValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio ``` In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles. For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the oracle to be stagnant and treat it like it's disabled.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1495,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1289,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1402,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6194,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccessControlManagerV8)6506"
      },
      {
        "astId": 6199,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5135,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(TokenConfig)5114_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)6506": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenConfig)5114_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ResilientOracle.TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)5114_storage"
      },
      "t_struct(TokenConfig)5114_storage": {
        "encoding": "inplace",
        "label": "struct ResilientOracle.TokenConfig",
        "members": [
          {
            "astId": 5103,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5108,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "oracles",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)3_storage"
          },
          {
            "astId": 5113,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "enableFlagsForOracles",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bool)3_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
