{
  "address": "0x21FAc57B2620e0e211D9E60883Ae7702C2f05D9f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nativeAssetAddress",
          "type": "address"
        },
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "_boundValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "OracleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mainOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pivotOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "TokenConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INVALID_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boundValidator",
      "outputs": [
        {
          "internalType": "contract BoundValidatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "enableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "enum ResilientOracle.OracleRole",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address[3]",
              "name": "oracles",
              "type": "address[3]"
            },
            {
              "internalType": "bool[3]",
              "name": "enableFlagsForOracles",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct ResilientOracle.TokenConfig[]",
          "name": "tokenConfigs_",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "updateAssetPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x539c9b055a3617e8c29c1177ed07db288868d6c9796a73c3daad564a1194a7a4",
  "receipt": {
    "to": null,
    "from": "0x5C85A7Ae2B6d29C38cdF360553F8aCBC4e684c31",
    "contractAddress": "0x21FAc57B2620e0e211D9E60883Ae7702C2f05D9f",
    "transactionIndex": 2,
    "gasUsed": "1898089",
    "logsBloom": "0x
    "blockHash": "0x2b2279501d662067d33cae5fd60878ca35335e8b44ab05a8a32b222a94ba3d52",
    "transactionHash": "0x539c9b055a3617e8c29c1177ed07db288868d6c9796a73c3daad564a1194a7a4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 226068024,
        "transactionHash": "0x539c9b055a3617e8c29c1177ed07db288868d6c9796a73c3daad564a1194a7a4",
        "address": "0x21FAc57B2620e0e211D9E60883Ae7702C2f05D9f",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0x2b2279501d662067d33cae5fd60878ca35335e8b44ab05a8a32b222a94ba3d52"
      }
    ],
    "blockNumber": 226068024,
    "cumulativeGasUsed": "2008519",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    "0x1F2ca038D3dA31f852D02B6d4741Fdca31F99Ec8"
  ],
  "numDeployments": 2,
  "solcInputHash": "8b975c83d0345a9998406aeb90f2b8bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"_boundValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"OracleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mainOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pivotOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVALID_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boundValidator\",\"outputs\":[{\"internalType\":\"contract BoundValidatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum ResilientOracle.OracleRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"oracles\",\"type\":\"address[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"enableFlagsForOracles\",\"type\":\"bool[3]\"}],\"internalType\":\"struct ResilientOracle.TokenConfig[]\",\"name\":\"tokenConfigs_\",\"type\":\"tuple[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"updateAssetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"nativeMarketAddress can be address(0) if on the chain we do not support native market      (e.g vETH on ethereum would not be supported, only vWETH)\",\"params\":{\"_boundValidator\":\"Address of the bound validator contract\",\"nativeAssetAddress\":\"The address of a native asset (for ethereum it would be WETH address)\"}},\"enableOracle(address,uint8,bool)\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"NotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set\",\"details\":\"Configuration for the asset **must** already exist and the asset cannot be 0 address\",\"params\":{\"asset\":\"Asset address\",\"enable\":\"Enabled boolean of the oracle\",\"role\":\"Oracle role\"}},\"getOracle(address,uint8)\":{\"params\":{\"asset\":\"asset address\",\"role\":\"Oracle role\"},\"returns\":{\"enabled\":\"Enabled flag of the oracle based on token config\",\"oracle\":\"Oracle address based on role\"}},\"getPrice(address)\":{\"custom:error\":\"Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid\",\"params\":{\"asset\":\"asset address\"},\"returns\":{\"_0\":\"price USD price in scaled decimal places.\"}},\"getTokenConfig(address)\":{\"details\":\"Gets token config by asset address\",\"params\":{\"asset\":\"asset address\"},\"returns\":{\"_0\":\"tokenConfig Config for the asset\"}},\"getUnderlyingPrice(address)\":{\"custom:error\":\"Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid\",\"params\":{\"vToken\":\"vToken address\"},\"returns\":{\"_0\":\"price USD price in scaled decimal places.\"}},\"initialize(address)\":{\"params\":{\"accessControlManager_\":\"Address of the access control manager contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"custom:access\":\"Only Governance\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setOracle(address,address,uint8)\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"Null address error if main-role oracle address is nullNotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set\",\"custom:event\":\"Emits OracleSet event with asset address, oracle address and role of the oracle for the asset\",\"details\":\"Supplied asset **must** exist and main oracle may not be null\",\"params\":{\"asset\":\"Asset address\",\"oracle\":\"Oracle address\",\"role\":\"Oracle role\"}},\"setTokenConfig((address,address[3],bool[3]))\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"NotNullAddress is thrown if asset address is nullNotNullAddress is thrown if main-role oracle address for asset is null\",\"custom:event\":\"Emits TokenConfigAdded event when the asset config is set successfully by the authorized account\",\"details\":\"main oracle **must not** be a null address\",\"params\":{\"tokenConfig\":\"Token config struct\"}},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"Throws a length error if the length of the token configs array is 0\",\"params\":{\"tokenConfigs_\":\"Token config array\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"custom:access\":\"Only Governance\"},\"updateAssetPrice(address)\":{\"details\":\"This function should always be called before calling getPrice\",\"params\":{\"asset\":\"asset address\"}},\"updatePrice(address)\":{\"details\":\"This function should always be called before calling getUnderlyingPrice\",\"params\":{\"vToken\":\"vToken address\"}}},\"stateVariables\":{\"boundValidator\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nativeMarket\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vai\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"title\":\"ResilientOracle\",\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"OracleEnabled(address,uint256,bool)\":{\"notice\":\"Event emitted when an oracle is enabled or disabled\"},\"OracleSet(address,address,uint256)\":{\"notice\":\"Event emitted when an oracle is set\"}},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"boundValidator()\":{\"notice\":\"Bound validator contract address\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"enableOracle(address,uint8,bool)\":{\"notice\":\"Enables/ disables oracle for the input asset. Token config for the input asset **must** exist\"},\"getOracle(address,uint8)\":{\"notice\":\"Gets oracle and enabled status by asset address\"},\"getPrice(address)\":{\"notice\":\"Gets price of the asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Gets price of the underlying asset for a given vToken. Validation flow: - Check if the oracle is paused globally - Validate price from main oracle against pivot oracle - Validate price from fallback oracle against pivot oracle if the first validation failed - Validate price from main oracle against fallback oracle if the second validation failed In the case that the pivot oracle is not available but main price is available and validation is successful, main oracle price is returned.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract admin and sets the BoundValidator contract address\"},\"nativeAsset()\":{\"notice\":\"Set this as asset address for Native token on each chain.\"},\"nativeMarket()\":{\"notice\":\"deprecated, keep it here just to maintain the storage layoutNative market address\"},\"pause()\":{\"notice\":\"Pauses oracle\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setOracle(address,address,uint8)\":{\"notice\":\"Sets oracle for a given asset and role.\"},\"setTokenConfig((address,address[3],bool[3]))\":{\"notice\":\"Sets/resets single token configs.\"},\"setTokenConfigs((address,address[3],bool[3])[])\":{\"notice\":\"Batch sets token configs\"},\"unpause()\":{\"notice\":\"Unpauses oracle\"},\"updateAssetPrice(address)\":{\"notice\":\"Updates the pivot oracle price. Currently using TWAP\"},\"updatePrice(address)\":{\"notice\":\"Updates the TWAP pivot oracle price.\"},\"vai()\":{\"notice\":\"deprecated, keeip it here just to maintain the storage layoutVAI address\"}},\"notice\":\"The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets. DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly reported prices. If only one oracle is used, this creates a single point of failure and opens a vector for attacking the protocol. The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source. For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source. To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every market. The upper bound ratio represents the deviation between reported price (the price that\\u2019s being validated) and the anchor price (the price we are validating against) above which the reported price will be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below which the reported price will be invalidated. So for oracle price to be considered valid the below statement should be true: ``` anchorRatio = anchorPrice/reporterPrice isValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio ``` In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles. For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the oracle to be stagnant and treat it like it's disabled.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResilientOracle.sol\":\"ResilientOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"contracts/ResilientOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n// SPDX-FileCopyrightText: 2022 Venus\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/VBep20Interface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\n\\n/**\\n * @title ResilientOracle\\n * @author Venus\\n * @notice The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets.\\n *\\n * DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly\\n * reported prices. If only one oracle is used, this creates a single point of failure and opens a vector\\n * for attacking the protocol.\\n *\\n * The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect\\n * the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle\\n * and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source.\\n *\\n * For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per\\n * vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot\\n * oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source.\\n *\\n * To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every\\n * market. The upper bound ratio represents the deviation between reported price (the price that\\u2019s being\\n * validated) and the anchor price (the price we are validating against) above which the reported price will\\n * be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below\\n * which the reported price will be invalidated. So for oracle price to be considered valid the below statement\\n * should be true:\\n\\n```\\nanchorRatio = anchorPrice/reporterPrice\\nisValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio\\n```\\n\\n * In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending\\n * on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may\\n * use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles.\\n *\\n * For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the\\n * oracle to be stagnant and treat it like it's disabled.\\n */\\ncontract ResilientOracle is PausableUpgradeable, AccessControlledV8, ResilientOracleInterface {\\n    /**\\n     * @dev Oracle roles:\\n     * **main**: The most trustworthy price source\\n     * **pivot**: Price oracle used as a loose sanity checker\\n     * **fallback**: The backup source when main oracle price is invalidated\\n     */\\n    enum OracleRole {\\n        MAIN,\\n        PIVOT,\\n        FALLBACK\\n    }\\n\\n    struct TokenConfig {\\n        /// @notice asset address\\n        address asset;\\n        /// @notice `oracles` stores the oracles based on their role in the following order:\\n        /// [main, pivot, fallback],\\n        /// It can be indexed with the corresponding enum OracleRole value\\n        address[3] oracles;\\n        /// @notice `enableFlagsForOracles` stores the enabled state\\n        /// for each oracle in the same order as `oracles`\\n        bool[3] enableFlagsForOracles;\\n    }\\n\\n    uint256 public constant INVALID_PRICE = 0;\\n\\n    /// @notice deprecated, keep it here just to maintain the storage layout\\n    /// @notice Native market address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable nativeMarket;\\n\\n    /// @notice deprecated, keeip it here just to maintain the storage layout\\n    /// @notice VAI address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vai;\\n\\n    /// @notice Set this as asset address for Native token on each chain.\\n    address public immutable nativeAsset;\\n\\n    /// @notice Bound validator contract address\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    BoundValidatorInterface public immutable boundValidator;\\n\\n    mapping(address => TokenConfig) private tokenConfigs;\\n\\n    event TokenConfigAdded(\\n        address indexed asset,\\n        address indexed mainOracle,\\n        address indexed pivotOracle,\\n        address fallbackOracle\\n    );\\n\\n    /// Event emitted when an oracle is set\\n    event OracleSet(address indexed asset, address indexed oracle, uint256 indexed role);\\n\\n    /// Event emitted when an oracle is enabled or disabled\\n    event OracleEnabled(address indexed asset, uint256 indexed role, bool indexed enable);\\n\\n    /**\\n     * @notice Checks whether an address is null or not\\n     */\\n    modifier notNullAddress(address someone) {\\n        if (someone == address(0)) revert(\\\"can't be zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks whether token config exists by checking whether asset is null address\\n     * @dev address can't be null, so it's suitable to be used to check the validity of the config\\n     * @param asset asset address\\n     */\\n    modifier checkTokenConfigExistence(address asset) {\\n        if (tokenConfigs[asset].asset == address(0)) revert(\\\"token config must exist\\\");\\n        _;\\n    }\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @dev nativeMarketAddress can be address(0) if on the chain we do not support native market\\n    ///      (e.g vETH on ethereum would not be supported, only vWETH)\\n    /// @param nativeAssetAddress The address of a native asset (for ethereum it would be WETH address)\\n    /// @param _boundValidator Address of the bound validator contract\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address nativeAssetAddress,\\n        BoundValidatorInterface _boundValidator\\n    ) notNullAddress(address(_boundValidator)) {\\n        nativeMarket = 0x0000000000000000000000000000000000000000;\\n        nativeAsset = nativeAssetAddress;\\n        vai = 0x0000000000000000000000000000000000000000;\\n        boundValidator = _boundValidator;\\n\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract admin and sets the BoundValidator contract address\\n     * @param accessControlManager_ Address of the access control manager contract\\n     */\\n    function initialize(address accessControlManager_) external initializer {\\n        __AccessControlled_init(accessControlManager_);\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @notice Pauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function pause() external {\\n        _checkAccessAllowed(\\\"pause()\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses oracle\\n     * @custom:access Only Governance\\n     */\\n    function unpause() external {\\n        _checkAccessAllowed(\\\"unpause()\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Batch sets token configs\\n     * @param tokenConfigs_ Token config array\\n     * @custom:access Only Governance\\n     * @custom:error Throws a length error if the length of the token configs array is 0\\n     */\\n    function setTokenConfigs(TokenConfig[] memory tokenConfigs_) external {\\n        if (tokenConfigs_.length == 0) revert(\\\"length can't be 0\\\");\\n        uint256 numTokenConfigs = tokenConfigs_.length;\\n        for (uint256 i; i < numTokenConfigs; ) {\\n            setTokenConfig(tokenConfigs_[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets oracle for a given asset and role.\\n     * @dev Supplied asset **must** exist and main oracle may not be null\\n     * @param asset Asset address\\n     * @param oracle Oracle address\\n     * @param role Oracle role\\n     * @custom:access Only Governance\\n     * @custom:error Null address error if main-role oracle address is null\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     * @custom:event Emits OracleSet event with asset address, oracle address and role of the oracle for the asset\\n     */\\n    function setOracle(\\n        address asset,\\n        address oracle,\\n        OracleRole role\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"setOracle(address,address,uint8)\\\");\\n        if (oracle == address(0) && role == OracleRole.MAIN) revert(\\\"can't set zero address to main oracle\\\");\\n        tokenConfigs[asset].oracles[uint256(role)] = oracle;\\n        emit OracleSet(asset, oracle, uint256(role));\\n    }\\n\\n    /**\\n     * @notice Enables/ disables oracle for the input asset. Token config for the input asset **must** exist\\n     * @dev Configuration for the asset **must** already exist and the asset cannot be 0 address\\n     * @param asset Asset address\\n     * @param role Oracle role\\n     * @param enable Enabled boolean of the oracle\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress error is thrown if asset address is null\\n     * @custom:error TokenConfigExistance error is thrown if token config is not set\\n     */\\n    function enableOracle(\\n        address asset,\\n        OracleRole role,\\n        bool enable\\n    ) external notNullAddress(asset) checkTokenConfigExistence(asset) {\\n        _checkAccessAllowed(\\\"enableOracle(address,uint8,bool)\\\");\\n        tokenConfigs[asset].enableFlagsForOracles[uint256(role)] = enable;\\n        emit OracleEnabled(asset, uint256(role), enable);\\n    }\\n\\n    /**\\n     * @notice Updates the TWAP pivot oracle price.\\n     * @dev This function should always be called before calling getUnderlyingPrice\\n     * @param vToken vToken address\\n     */\\n    function updatePrice(address vToken) external override {\\n        address asset = _getUnderlyingAsset(vToken);\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the pivot oracle price. Currently using TWAP\\n     * @dev This function should always be called before calling getPrice\\n     * @param asset asset address\\n     */\\n    function updateAssetPrice(address asset) external {\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracle != address(0) && pivotOracleEnabled) {\\n            //if pivot oracle is not TwapOracle it will revert so we need to catch the revert\\n            try TwapInterface(pivotOracle).updateTwap(asset) {} catch {}\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets token config by asset address\\n     * @param asset asset address\\n     * @return tokenConfig Config for the asset\\n     */\\n    function getTokenConfig(address asset) external view returns (TokenConfig memory) {\\n        return tokenConfigs[asset];\\n    }\\n\\n    /**\\n     * @notice Gets price of the underlying asset for a given vToken. Validation flow:\\n     * - Check if the oracle is paused globally\\n     * - Validate price from main oracle against pivot oracle\\n     * - Validate price from fallback oracle against pivot oracle if the first validation failed\\n     * - Validate price from main oracle against fallback oracle if the second validation failed\\n     * In the case that the pivot oracle is not available but main price is available and validation is successful,\\n     * main oracle price is returned.\\n     * @param vToken vToken address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getUnderlyingPrice(address vToken) external view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n\\n        address asset = _getUnderlyingAsset(vToken);\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Gets price of the asset\\n     * @param asset asset address\\n     * @return price USD price in scaled decimal places.\\n     * @custom:error Paused error is thrown when resilent oracle is paused\\n     * @custom:error Invalid resilient oracle price error is thrown if fetched prices from oracle is invalid\\n     */\\n    function getPrice(address asset) external view override returns (uint256) {\\n        if (paused()) revert(\\\"resilient oracle is paused\\\");\\n        return _getPrice(asset);\\n    }\\n\\n    /**\\n     * @notice Sets/resets single token configs.\\n     * @dev main oracle **must not** be a null address\\n     * @param tokenConfig Token config struct\\n     * @custom:access Only Governance\\n     * @custom:error NotNullAddress is thrown if asset address is null\\n     * @custom:error NotNullAddress is thrown if main-role oracle address for asset is null\\n     * @custom:event Emits TokenConfigAdded event when the asset config is set successfully by the authorized account\\n     */\\n    function setTokenConfig(\\n        TokenConfig memory tokenConfig\\n    ) public notNullAddress(tokenConfig.asset) notNullAddress(tokenConfig.oracles[uint256(OracleRole.MAIN)]) {\\n        _checkAccessAllowed(\\\"setTokenConfig(TokenConfig)\\\");\\n\\n        tokenConfigs[tokenConfig.asset] = tokenConfig;\\n        emit TokenConfigAdded(\\n            tokenConfig.asset,\\n            tokenConfig.oracles[uint256(OracleRole.MAIN)],\\n            tokenConfig.oracles[uint256(OracleRole.PIVOT)],\\n            tokenConfig.oracles[uint256(OracleRole.FALLBACK)]\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets oracle and enabled status by asset address\\n     * @param asset asset address\\n     * @param role Oracle role\\n     * @return oracle Oracle address based on role\\n     * @return enabled Enabled flag of the oracle based on token config\\n     */\\n    function getOracle(address asset, OracleRole role) public view returns (address oracle, bool enabled) {\\n        oracle = tokenConfigs[asset].oracles[uint256(role)];\\n        enabled = tokenConfigs[asset].enableFlagsForOracles[uint256(role)];\\n    }\\n\\n    function _getPrice(address asset) internal view returns (uint256) {\\n        uint256 pivotPrice = INVALID_PRICE;\\n\\n        // Get pivot oracle price, Invalid price if not available or error\\n        (address pivotOracle, bool pivotOracleEnabled) = getOracle(asset, OracleRole.PIVOT);\\n        if (pivotOracleEnabled && pivotOracle != address(0)) {\\n            try OracleInterface(pivotOracle).getPrice(asset) returns (uint256 pricePivot) {\\n                pivotPrice = pricePivot;\\n            } catch {}\\n        }\\n\\n        // Compare main price and pivot price, return main price and if validation was successful\\n        // note: In case pivot oracle is not available but main price is available and\\n        // validation is successful, the main oracle price is returned.\\n        (uint256 mainPrice, bool validatedPivotMain) = _getMainOraclePrice(\\n            asset,\\n            pivotPrice,\\n            pivotOracleEnabled && pivotOracle != address(0)\\n        );\\n        if (mainPrice != INVALID_PRICE && validatedPivotMain) return mainPrice;\\n\\n        // Compare fallback and pivot if main oracle comparision fails with pivot\\n        // Return fallback price when fallback price is validated successfully with pivot oracle\\n        (uint256 fallbackPrice, bool validatedPivotFallback) = _getFallbackOraclePrice(asset, pivotPrice);\\n        if (fallbackPrice != INVALID_PRICE && validatedPivotFallback) return fallbackPrice;\\n\\n        // Lastly compare main price and fallback price\\n        if (\\n            mainPrice != INVALID_PRICE &&\\n            fallbackPrice != INVALID_PRICE &&\\n            boundValidator.validatePriceWithAnchorPrice(asset, mainPrice, fallbackPrice)\\n        ) {\\n            return mainPrice;\\n        }\\n\\n        revert(\\\"invalid resilient oracle price\\\");\\n    }\\n\\n    /**\\n     * @notice Gets a price for the provided asset\\n     * @dev This function won't revert when price is 0, because the fallback oracle may still be\\n     * able to fetch a correct price\\n     * @param asset asset address\\n     * @param pivotPrice Pivot oracle price\\n     * @param pivotEnabled If pivot oracle is not empty and enabled\\n     * @return price USD price in scaled decimals\\n     * e.g. asset decimals is 8 then price is returned as 10**18 * 10**(18-8) = 10**28 decimals\\n     * @return pivotValidated Boolean representing if the validation of main oracle price\\n     * and pivot oracle price were successful\\n     * @custom:error Invalid price error is thrown if main oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if main oracle is not enabled or main oracle\\n     * address is null\\n     */\\n    function _getMainOraclePrice(\\n        address asset,\\n        uint256 pivotPrice,\\n        bool pivotEnabled\\n    ) internal view returns (uint256, bool) {\\n        (address mainOracle, bool mainOracleEnabled) = getOracle(asset, OracleRole.MAIN);\\n        if (mainOracleEnabled && mainOracle != address(0)) {\\n            try OracleInterface(mainOracle).getPrice(asset) returns (uint256 mainOraclePrice) {\\n                if (!pivotEnabled) {\\n                    return (mainOraclePrice, true);\\n                }\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (mainOraclePrice, false);\\n                }\\n                return (\\n                    mainOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, mainOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function won't revert when the price is 0 because getPrice checks if price is > 0\\n     * @param asset asset address\\n     * @return price USD price in 18 decimals\\n     * @return pivotValidated Boolean representing if the validation of fallback oracle price\\n     * and pivot oracle price were successfull\\n     * @custom:error Invalid price error is thrown if fallback oracle fails to fetch price of the asset\\n     * @custom:error Invalid price error is thrown if fallback oracle is not enabled or fallback oracle\\n     * address is null\\n     */\\n    function _getFallbackOraclePrice(address asset, uint256 pivotPrice) private view returns (uint256, bool) {\\n        (address fallbackOracle, bool fallbackEnabled) = getOracle(asset, OracleRole.FALLBACK);\\n        if (fallbackEnabled && fallbackOracle != address(0)) {\\n            try OracleInterface(fallbackOracle).getPrice(asset) returns (uint256 fallbackOraclePrice) {\\n                if (pivotPrice == INVALID_PRICE) {\\n                    return (fallbackOraclePrice, false);\\n                }\\n                return (\\n                    fallbackOraclePrice,\\n                    boundValidator.validatePriceWithAnchorPrice(asset, fallbackOraclePrice, pivotPrice)\\n                );\\n            } catch {\\n                return (INVALID_PRICE, false);\\n            }\\n        }\\n\\n        return (INVALID_PRICE, false);\\n    }\\n\\n    /**\\n     * @dev This function returns the underlying asset of a vToken\\n     * @param vToken vToken address\\n     * @return asset underlying asset address\\n     */\\n    function _getUnderlyingAsset(address vToken) private view notNullAddress(vToken) returns (address asset) {\\n        if (VBep20Interface(vToken).isCEther()) {\\n            asset = nativeAsset;\\n        } else {\\n            asset = VBep20Interface(vToken).underlying();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf95a8d0ecbf496332cf35976a3f3996ec7e87aba5da3774f827777a59c2e324f\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2432799b0d824fc701beb4c30146e912b9aeecf77b5c1635dde6c5fbe6bfc3a7\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/VBep20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface VBep20Interface is IERC20Metadata {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    function underlying() external view returns (address);\\n\\n    function isCEther() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x39369af36a79439ca85c4a59b2c825a4b6589b222bd858e3ece35c773c6fa143\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516122f03803806122f08339810160408190526100309161018f565b806001600160a01b03811661008c5760405162461bcd60e51b815260206004820152601560248201527f63616e2774206265207a65726f2061646472657373000000000000000000000060448201526064015b60405180910390fd5b600060808190526001600160a01b0384811660c05260a091909152821660e0526100b46100bc565b5050506101c9565b600054610100900460ff16156101245760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608401610083565b60005460ff90811614610175576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b038116811461018c57600080fd5b50565b600080604083850312156101a257600080fd5b82516101ad81610177565b60208401519092506101be81610177565b809150509250929050565b60805160a05160c05160e0516120d261021e600039600081816101d3015281816112bf015281816116a20152611812015260008181610279015261146c01526000610364015260006102b001526120d26000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a2f7f6d116100de578063b62cad6911610097578063cb67e3b111610071578063cb67e3b114610399578063e30c3978146103b9578063f2fde38b146103ca578063fc57d4df146103dd57600080fd5b8063b62cad691461034c578063b62e4c921461035f578063c4d66de81461038657600080fd5b80638a2f7f6d146102ab5780638b855da4146102d25780638da5cb5b1461030457806396e85ced14610315578063a6b1344a14610328578063b4a0bdf31461033b57600080fd5b80634b932b8f1161014b578063715018a611610125578063715018a61461026c57806374d32ad41461027457806379ba50971461029b5780638456cb59146102a357600080fd5b80634b932b8f1461023b5780634bf39cba1461024e5780635c975abb1461025657600080fd5b80630e32cb86146101935780632cfa3871146101a8578063333a21b0146101bb57806333d33494146101ce5780633f4ba83a1461021257806341976e091461021a575b600080fd5b6101a66101a1366004611b4f565b6103f0565b005b6101a66101b6366004611cdc565b610404565b6101a66101c9366004611d8c565b61048a565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66105dc565b61022d610228366004611b4f565b610610565b604051908152602001610209565b6101a6610249366004611dbc565b61067a565b61022d600081565b60335460ff166040519015158152602001610209565b6101a66107f0565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a6610802565b6101a6610879565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6102e56102e0366004611e05565b6108a9565b604080516001600160a01b039093168352901515602083015201610209565b6065546001600160a01b03166101f5565b6101a6610323366004611b4f565b61094b565b6101a6610336366004611e3a565b6109f6565b60c9546001600160a01b03166101f5565b6101a661035a366004611b4f565b610bf8565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a6610394366004611b4f565b610c94565b6103ac6103a7366004611b4f565b610db0565b6040516102099190611e81565b6097546001600160a01b03166101f5565b6101a66103d8366004611b4f565b610e85565b61022d6103eb366004611b4f565b610ef6565b6103f8610f6e565b61040181610fc8565b50565b805160000361044e5760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b805160005b818110156104855761047d83828151811061047057610470611efc565b602002602001015161048a565b600101610453565b505050565b80516001600160a01b0381166104b25760405162461bcd60e51b815260040161044590611f12565b6020820151516001600160a01b0381166104de5760405162461bcd60e51b815260040161044590611f12565b61051c6040518060400160405280601b81526020017f736574546f6b656e436f6e66696728546f6b656e436f6e666967290000000000815250611086565b82516001600160a01b03908116600090815260fb60209081526040909120855181546001600160a01b031916931692909217825584015184919061056690600183019060036119ed565b50604082015161057c9060048301906003611a45565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61060660405180604001604052806009815260200168756e7061757365282960b81b815250611086565b61060e611120565b565b600061061e60335460ff1690565b1561066b5760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610445565b61067482611172565b92915050565b826001600160a01b0381166106a15760405162461bcd60e51b815260040161044590611f12565b6001600160a01b03808516600090815260fb60205260409020548591166107045760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610445565b6107426040518060400160405280602081526020017f656e61626c654f7261636c6528616464726573732c75696e74382c626f6f6c29815250611086565b6001600160a01b038516600090815260fb60205260409020839060040185600281111561077157610771611f41565b6003811061078157610781611efc565b602091828204019190066101000a81548160ff0219169083151502179055508215158460028111156107b5576107b5611f41565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b6107f8610f6e565b61060e6000611384565b60975433906001600160a01b031681146108705760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610445565b61040181611384565b6108a1604051806040016040528060078152602001667061757365282960c81b815250611086565b61060e61139d565b6001600160a01b038216600090815260fb6020526040812081906001018360028111156108d8576108d8611f41565b600381106108e8576108e8611efc565b01546001600160a01b03858116600090815260fb602052604090209116925060040183600281111561091c5761091c611f41565b6003811061092c5761092c611efc565b602091828204019190069054906101000a900460ff1690509250929050565b6000610956826113da565b90506000806109668360016108a9565b90925090506001600160a01b038216158015906109805750805b156109f05760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af19250505080156109e9575060408051601f3d908101601f191682019092526109e691810190611f57565b60015b156109f057505b50505050565b826001600160a01b038116610a1d5760405162461bcd60e51b815260040161044590611f12565b6001600160a01b03808516600090815260fb6020526040902054859116610a805760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610445565b610abe6040518060400160405280602081526020017f7365744f7261636c6528616464726573732c616464726573732c75696e743829815250611086565b6001600160a01b038416158015610ae657506000836002811115610ae457610ae4611f41565b145b15610b415760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b6064820152608401610445565b6001600160a01b038516600090815260fb602052604090208490600101846002811115610b7057610b70611f41565b60038110610b8057610b80611efc565b0180546001600160a01b0319166001600160a01b0392909216919091179055826002811115610bb157610bb1611f41565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600080610c068360016108a9565b90925090506001600160a01b03821615801590610c205750805b156104855760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610c89575060408051601f3d908101601f19168201909252610c8691810190611f57565b60015b156104855750505050565b600054610100900460ff1615808015610cb45750600054600160ff909116105b80610cce5750303b158015610cce575060005460ff166001145b610d315760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610445565b6000805460ff191660011790558015610d54576000805461ff0019166101001790555b610d5d826114fa565b610d65611532565b8015610dac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b610db8611ad2565b6001600160a01b03828116600090815260fb60209081526040918290208251606080820185528254909516815283519485019384905293909291840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610e00575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610e455790505050505050815250509050919050565b610e8d610f6e565b609780546001600160a01b0383166001600160a01b03199091168117909155610ebe6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000610f0460335460ff1690565b15610f515760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610445565b6000610f5c836113da565b9050610f6781611172565b9392505050565b6065546001600160a01b0316331461060e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610445565b6001600160a01b03811661102c5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610445565b60c980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa09101610da3565b60c9546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906110b99033908690600401611fb6565b602060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa9190611fe2565b905080610dac57333083604051634a3fa29360e01b815260040161044593929190611fff565b611128611561565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008080806111828560016108a9565b9150915080801561119b57506001600160a01b03821615155b1561120a576040516341976e0960e01b81526001600160a01b0386811660048301528316906341976e0990602401602060405180830381865afa925050508015611202575060408051601f3d908101601f191682019092526111ff91810190611f57565b60015b1561120a5792505b60008061122c878685801561122757506001600160a01b03871615155b6115aa565b915091506000821415801561123e5750805b1561124d575095945050505050565b60008061125a898861172d565b915091506000821415801561126c5750805b1561127d5750979650505050505050565b831580159061128b57508115155b801561132a5750604051634be3819f60e11b81526001600160a01b038a8116600483015260248201869052604482018490527f000000000000000000000000000000000000000000000000000000000000000016906397c7033e90606401602060405180830381865afa158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a9190611fe2565b1561133c575091979650505050505050565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c6520707269636500006044820152606401610445565b609780546001600160a01b03191690556104018161189c565b6113a56118ee565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111553390565b6000816001600160a01b0381166114035760405162461bcd60e51b815260040161044590611f12565b826001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114659190611fe2565b15611492577f000000000000000000000000000000000000000000000000000000000000000091506114f4565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612034565b50919050565b600054610100900460ff166115215760405162461bcd60e51b815260040161044590612051565b611529611934565b61040181611963565b600054610100900460ff166115595760405162461bcd60e51b815260040161044590612051565b61060e61198a565b60335460ff1661060e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610445565b6000806000806115bb8760006108a9565b915091508080156115d457506001600160a01b03821615155b1561171b576040516341976e0960e01b81526001600160a01b0388811660048301528316906341976e0990602401602060405180830381865afa92505050801561163b575060408051601f3d908101601f1916820190925261163891810190611f57565b60015b61164d57600080935093505050611725565b8561166057935060019250611725915050565b8661167357935060009250611725915050565b604051634be3819f60e11b81526001600160a01b038981166004830152602482018390526044820189905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190611fe2565b94509450505050611725565b6000809350935050505b935093915050565b60008060008061173e8660026108a9565b9150915080801561175757506001600160a01b03821615155b1561188b576040516341976e0960e01b81526001600160a01b0387811660048301528316906341976e0990602401602060405180830381865afa9250505080156117be575060408051601f3d908101601f191682019092526117bb91810190611f57565b60015b6117d057600080935093505050611895565b856117e357935060009250611895915050565b604051634be3819f60e11b81526001600160a01b038881166004830152602482018390526044820188905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187f9190611fe2565b94509450505050611895565b6000809350935050505b9250929050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff161561060e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610445565b600054610100900460ff1661195b5760405162461bcd60e51b815260040161044590612051565b61060e6119bd565b600054610100900460ff166103f85760405162461bcd60e51b815260040161044590612051565b600054610100900460ff166119b15760405162461bcd60e51b815260040161044590612051565b6033805460ff19169055565b600054610100900460ff166119e45760405162461bcd60e51b815260040161044590612051565b61060e33611384565b8260038101928215611a35579160200282015b82811115611a3557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a00565b50611a41929150611b07565b5090565b600183019183908215611a355791602002820160005b83821115611a9857835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611a5b565b8015611ac55782816101000a81549060ff0219169055600101602081600001049283019260010302611a98565b5050611a41929150611b07565b604051806060016040528060006001600160a01b03168152602001611af5611b1c565b8152602001611b02611b1c565b905290565b5b80821115611a415760008155600101611b08565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461040157600080fd5b600060208284031215611b6157600080fd5b8135610f6781611b3a565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611ba557611ba5611b6c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bd457611bd4611b6c565b604052919050565b801515811461040157600080fd5b600082601f830112611bfb57600080fd5b611c03611b82565b806060840185811115611c1557600080fd5b845b81811015611c38578035611c2a81611bdc565b845260209384019301611c17565b509095945050505050565b600060e08284031215611c5557600080fd5b611c5d611b82565b90508135611c6a81611b3a565b81526020603f83018413611c7d57600080fd5b611c85611b82565b806080850186811115611c9757600080fd5b602086015b81811015611cbc578035611caf81611b3a565b8452928401928401611c9c565b50816020860152611ccd8782611bea565b60408601525050505092915050565b60006020808385031215611cef57600080fd5b823567ffffffffffffffff80821115611d0757600080fd5b818501915085601f830112611d1b57600080fd5b813581811115611d2d57611d2d611b6c565b611d3b848260051b01611bab565b818152848101925060e0918202840185019188831115611d5a57600080fd5b938501935b82851015611d8057611d718986611c43565b84529384019392850192611d5f565b50979650505050505050565b600060e08284031215611d9e57600080fd5b610f678383611c43565b803560038110611db757600080fd5b919050565b600080600060608486031215611dd157600080fd5b8335611ddc81611b3a565b9250611dea60208501611da8565b91506040840135611dfa81611bdc565b809150509250925092565b60008060408385031215611e1857600080fd5b8235611e2381611b3a565b9150611e3160208401611da8565b90509250929050565b600080600060608486031215611e4f57600080fd5b8335611e5a81611b3a565b92506020840135611e6a81611b3a565b9150611e7860408501611da8565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b6003811015611ec2578251851682529183019190830190600101611ea3565b505050604085015191506080840160005b6003811015611ef2578351151582529282019290820190600101611ed3565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611f6957600080fd5b5051919050565b6000815180845260005b81811015611f9657602081850181015186830182015201611f7a565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0383168152604060208201819052600090611fda90830184611f70565b949350505050565b600060208284031215611ff457600080fd5b8151610f6781611bdc565b6001600160a01b0384811682528316602082015260606040820181905260009061202b90830184611f70565b95945050505050565b60006020828403121561204657600080fd5b8151610f6781611b3a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212209dbcb64f8c151343d283d73c8b26c8ea199df8f18b185df3fde686eeeac43e8c64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a2f7f6d116100de578063b62cad6911610097578063cb67e3b111610071578063cb67e3b114610399578063e30c3978146103b9578063f2fde38b146103ca578063fc57d4df146103dd57600080fd5b8063b62cad691461034c578063b62e4c921461035f578063c4d66de81461038657600080fd5b80638a2f7f6d146102ab5780638b855da4146102d25780638da5cb5b1461030457806396e85ced14610315578063a6b1344a14610328578063b4a0bdf31461033b57600080fd5b80634b932b8f1161014b578063715018a611610125578063715018a61461026c57806374d32ad41461027457806379ba50971461029b5780638456cb59146102a357600080fd5b80634b932b8f1461023b5780634bf39cba1461024e5780635c975abb1461025657600080fd5b80630e32cb86146101935780632cfa3871146101a8578063333a21b0146101bb57806333d33494146101ce5780633f4ba83a1461021257806341976e091461021a575b600080fd5b6101a66101a1366004611b4f565b6103f0565b005b6101a66101b6366004611cdc565b610404565b6101a66101c9366004611d8c565b61048a565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66105dc565b61022d610228366004611b4f565b610610565b604051908152602001610209565b6101a6610249366004611dbc565b61067a565b61022d600081565b60335460ff166040519015158152602001610209565b6101a66107f0565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a6610802565b6101a6610879565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6102e56102e0366004611e05565b6108a9565b604080516001600160a01b039093168352901515602083015201610209565b6065546001600160a01b03166101f5565b6101a6610323366004611b4f565b61094b565b6101a6610336366004611e3a565b6109f6565b60c9546001600160a01b03166101f5565b6101a661035a366004611b4f565b610bf8565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101a6610394366004611b4f565b610c94565b6103ac6103a7366004611b4f565b610db0565b6040516102099190611e81565b6097546001600160a01b03166101f5565b6101a66103d8366004611b4f565b610e85565b61022d6103eb366004611b4f565b610ef6565b6103f8610f6e565b61040181610fc8565b50565b805160000361044e5760405162461bcd60e51b815260206004820152601160248201527006c656e6774682063616e2774206265203607c1b60448201526064015b60405180910390fd5b805160005b818110156104855761047d83828151811061047057610470611efc565b602002602001015161048a565b600101610453565b505050565b80516001600160a01b0381166104b25760405162461bcd60e51b815260040161044590611f12565b6020820151516001600160a01b0381166104de5760405162461bcd60e51b815260040161044590611f12565b61051c6040518060400160405280601b81526020017f736574546f6b656e436f6e66696728546f6b656e436f6e666967290000000000815250611086565b82516001600160a01b03908116600090815260fb60209081526040909120855181546001600160a01b031916931692909217825584015184919061056690600183019060036119ed565b50604082015161057c9060048301906003611a45565b505050602083810151808201518151865160409384015193516001600160a01b039485168152928416949184169316917fa51ad01e2270c314a7b78f0c60fe66c723f2d06c121d63fcdce776e654878fc1910160405180910390a4505050565b61060660405180604001604052806009815260200168756e7061757365282960b81b815250611086565b61060e611120565b565b600061061e60335460ff1690565b1561066b5760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610445565b61067482611172565b92915050565b826001600160a01b0381166106a15760405162461bcd60e51b815260040161044590611f12565b6001600160a01b03808516600090815260fb60205260409020548591166107045760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610445565b6107426040518060400160405280602081526020017f656e61626c654f7261636c6528616464726573732c75696e74382c626f6f6c29815250611086565b6001600160a01b038516600090815260fb60205260409020839060040185600281111561077157610771611f41565b6003811061078157610781611efc565b602091828204019190066101000a81548160ff0219169083151502179055508215158460028111156107b5576107b5611f41565b6040516001600160a01b038816907fcf3cad1ec87208efbde5d82a0557484a78d4182c3ad16926a5463bc1f7234b3d90600090a45050505050565b6107f8610f6e565b61060e6000611384565b60975433906001600160a01b031681146108705760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610445565b61040181611384565b6108a1604051806040016040528060078152602001667061757365282960c81b815250611086565b61060e61139d565b6001600160a01b038216600090815260fb6020526040812081906001018360028111156108d8576108d8611f41565b600381106108e8576108e8611efc565b01546001600160a01b03858116600090815260fb602052604090209116925060040183600281111561091c5761091c611f41565b6003811061092c5761092c611efc565b602091828204019190069054906101000a900460ff1690509250929050565b6000610956826113da565b90506000806109668360016108a9565b90925090506001600160a01b038216158015906109805750805b156109f05760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af19250505080156109e9575060408051601f3d908101601f191682019092526109e691810190611f57565b60015b156109f057505b50505050565b826001600160a01b038116610a1d5760405162461bcd60e51b815260040161044590611f12565b6001600160a01b03808516600090815260fb6020526040902054859116610a805760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b8818dbdb999a59c81b5d5cdd08195e1a5cdd604a1b6044820152606401610445565b610abe6040518060400160405280602081526020017f7365744f7261636c6528616464726573732c616464726573732c75696e743829815250611086565b6001600160a01b038416158015610ae657506000836002811115610ae457610ae4611f41565b145b15610b415760405162461bcd60e51b815260206004820152602560248201527f63616e277420736574207a65726f206164647265737320746f206d61696e206f6044820152647261636c6560d81b6064820152608401610445565b6001600160a01b038516600090815260fb602052604090208490600101846002811115610b7057610b70611f41565b60038110610b8057610b80611efc565b0180546001600160a01b0319166001600160a01b0392909216919091179055826002811115610bb157610bb1611f41565b846001600160a01b0316866001600160a01b03167fea681d3efb830ef032a9c29a7215b5ceeeb546250d2c463dbf87817aecda1bf160405160405180910390a45050505050565b600080610c068360016108a9565b90925090506001600160a01b03821615801590610c205750805b156104855760405163725068a560e01b81526001600160a01b03848116600483015283169063725068a5906024016020604051808303816000875af1925050508015610c89575060408051601f3d908101601f19168201909252610c8691810190611f57565b60015b156104855750505050565b600054610100900460ff1615808015610cb45750600054600160ff909116105b80610cce5750303b158015610cce575060005460ff166001145b610d315760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610445565b6000805460ff191660011790558015610d54576000805461ff0019166101001790555b610d5d826114fa565b610d65611532565b8015610dac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b610db8611ad2565b6001600160a01b03828116600090815260fb60209081526040918290208251606080820185528254909516815283519485019384905293909291840191600184019060039082845b81546001600160a01b03168152600190910190602001808311610e00575050509183525050604080516060810191829052602090920191906004840190600390826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610e455790505050505050815250509050919050565b610e8d610f6e565b609780546001600160a01b0383166001600160a01b03199091168117909155610ebe6065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000610f0460335460ff1690565b15610f515760405162461bcd60e51b815260206004820152601a60248201527f726573696c69656e74206f7261636c65206973207061757365640000000000006044820152606401610445565b6000610f5c836113da565b9050610f6781611172565b9392505050565b6065546001600160a01b0316331461060e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610445565b6001600160a01b03811661102c5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610445565b60c980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa09101610da3565b60c9546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906110b99033908690600401611fb6565b602060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa9190611fe2565b905080610dac57333083604051634a3fa29360e01b815260040161044593929190611fff565b611128611561565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008080806111828560016108a9565b9150915080801561119b57506001600160a01b03821615155b1561120a576040516341976e0960e01b81526001600160a01b0386811660048301528316906341976e0990602401602060405180830381865afa925050508015611202575060408051601f3d908101601f191682019092526111ff91810190611f57565b60015b1561120a5792505b60008061122c878685801561122757506001600160a01b03871615155b6115aa565b915091506000821415801561123e5750805b1561124d575095945050505050565b60008061125a898861172d565b915091506000821415801561126c5750805b1561127d5750979650505050505050565b831580159061128b57508115155b801561132a5750604051634be3819f60e11b81526001600160a01b038a8116600483015260248201869052604482018490527f000000000000000000000000000000000000000000000000000000000000000016906397c7033e90606401602060405180830381865afa158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a9190611fe2565b1561133c575091979650505050505050565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726573696c69656e74206f7261636c6520707269636500006044820152606401610445565b609780546001600160a01b03191690556104018161189c565b6113a56118ee565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111553390565b6000816001600160a01b0381166114035760405162461bcd60e51b815260040161044590611f12565b826001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114659190611fe2565b15611492577f000000000000000000000000000000000000000000000000000000000000000091506114f4565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612034565b50919050565b600054610100900460ff166115215760405162461bcd60e51b815260040161044590612051565b611529611934565b61040181611963565b600054610100900460ff166115595760405162461bcd60e51b815260040161044590612051565b61060e61198a565b60335460ff1661060e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610445565b6000806000806115bb8760006108a9565b915091508080156115d457506001600160a01b03821615155b1561171b576040516341976e0960e01b81526001600160a01b0388811660048301528316906341976e0990602401602060405180830381865afa92505050801561163b575060408051601f3d908101601f1916820190925261163891810190611f57565b60015b61164d57600080935093505050611725565b8561166057935060019250611725915050565b8661167357935060009250611725915050565b604051634be3819f60e11b81526001600160a01b038981166004830152602482018390526044820189905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190611fe2565b94509450505050611725565b6000809350935050505b935093915050565b60008060008061173e8660026108a9565b9150915080801561175757506001600160a01b03821615155b1561188b576040516341976e0960e01b81526001600160a01b0387811660048301528316906341976e0990602401602060405180830381865afa9250505080156117be575060408051601f3d908101601f191682019092526117bb91810190611f57565b60015b6117d057600080935093505050611895565b856117e357935060009250611895915050565b604051634be3819f60e11b81526001600160a01b038881166004830152602482018390526044820188905282917f0000000000000000000000000000000000000000000000000000000000000000909116906397c7033e90606401602060405180830381865afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187f9190611fe2565b94509450505050611895565b6000809350935050505b9250929050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff161561060e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610445565b600054610100900460ff1661195b5760405162461bcd60e51b815260040161044590612051565b61060e6119bd565b600054610100900460ff166103f85760405162461bcd60e51b815260040161044590612051565b600054610100900460ff166119b15760405162461bcd60e51b815260040161044590612051565b6033805460ff19169055565b600054610100900460ff166119e45760405162461bcd60e51b815260040161044590612051565b61060e33611384565b8260038101928215611a35579160200282015b82811115611a3557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a00565b50611a41929150611b07565b5090565b600183019183908215611a355791602002820160005b83821115611a9857835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611a5b565b8015611ac55782816101000a81549060ff0219169055600101602081600001049283019260010302611a98565b5050611a41929150611b07565b604051806060016040528060006001600160a01b03168152602001611af5611b1c565b8152602001611b02611b1c565b905290565b5b80821115611a415760008155600101611b08565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461040157600080fd5b600060208284031215611b6157600080fd5b8135610f6781611b3a565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611ba557611ba5611b6c565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bd457611bd4611b6c565b604052919050565b801515811461040157600080fd5b600082601f830112611bfb57600080fd5b611c03611b82565b806060840185811115611c1557600080fd5b845b81811015611c38578035611c2a81611bdc565b845260209384019301611c17565b509095945050505050565b600060e08284031215611c5557600080fd5b611c5d611b82565b90508135611c6a81611b3a565b81526020603f83018413611c7d57600080fd5b611c85611b82565b806080850186811115611c9757600080fd5b602086015b81811015611cbc578035611caf81611b3a565b8452928401928401611c9c565b50816020860152611ccd8782611bea565b60408601525050505092915050565b60006020808385031215611cef57600080fd5b823567ffffffffffffffff80821115611d0757600080fd5b818501915085601f830112611d1b57600080fd5b813581811115611d2d57611d2d611b6c565b611d3b848260051b01611bab565b818152848101925060e0918202840185019188831115611d5a57600080fd5b938501935b82851015611d8057611d718986611c43565b84529384019392850192611d5f565b50979650505050505050565b600060e08284031215611d9e57600080fd5b610f678383611c43565b803560038110611db757600080fd5b919050565b600080600060608486031215611dd157600080fd5b8335611ddc81611b3a565b9250611dea60208501611da8565b91506040840135611dfa81611bdc565b809150509250925092565b60008060408385031215611e1857600080fd5b8235611e2381611b3a565b9150611e3160208401611da8565b90509250929050565b600080600060608486031215611e4f57600080fd5b8335611e5a81611b3a565b92506020840135611e6a81611b3a565b9150611e7860408501611da8565b90509250925092565b81516001600160a01b03908116825260208084015160e0840192919081850160005b6003811015611ec2578251851682529183019190830190600101611ea3565b505050604085015191506080840160005b6003811015611ef2578351151582529282019290820190600101611ed3565b5050505092915050565b634e487b7160e01b600052603260045260246000fd5b60208082526015908201527463616e2774206265207a65726f206164647265737360581b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611f6957600080fd5b5051919050565b6000815180845260005b81811015611f9657602081850181015186830182015201611f7a565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0383168152604060208201819052600090611fda90830184611f70565b949350505050565b600060208284031215611ff457600080fd5b8151610f6781611bdc565b6001600160a01b0384811682528316602082015260606040820181905260009061202b90830184611f70565b95945050505050565b60006020828403121561204657600080fd5b8151610f6781611b3a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212209dbcb64f8c151343d283d73c8b26c8ea199df8f18b185df3fde686eeeac43e8c64736f6c63430008190033",
  "devdoc": {
    "author": "Venus",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "nativeMarketAddress can be address(0) if on the chain we do not support native market      (e.g vETH on ethereum would not be supported, only vWETH)",
        "params": {
          "_boundValidator": "Address of the bound validator contract",
          "nativeAssetAddress": "The address of a native asset (for ethereum it would be WETH address)"
        }
      },
      "enableOracle(address,uint8,bool)": {
        "custom:access": "Only Governance",
        "custom:error": "NotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set",
        "details": "Configuration for the asset **must** already exist and the asset cannot be 0 address",
        "params": {
          "asset": "Asset address",
          "enable": "Enabled boolean of the oracle",
          "role": "Oracle role"
        }
      },
      "getOracle(address,uint8)": {
        "params": {
          "asset": "asset address",
          "role": "Oracle role"
        },
        "returns": {
          "enabled": "Enabled flag of the oracle based on token config",
          "oracle": "Oracle address based on role"
        }
      },
      "getPrice(address)": {
        "custom:error": "Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid",
        "params": {
          "asset": "asset address"
        },
        "returns": {
          "_0": "price USD price in scaled decimal places."
        }
      },
      "getTokenConfig(address)": {
        "details": "Gets token config by asset address",
        "params": {
          "asset": "asset address"
        },
        "returns": {
          "_0": "tokenConfig Config for the asset"
        }
      },
      "getUnderlyingPrice(address)": {
        "custom:error": "Paused error is thrown when resilent oracle is pausedInvalid resilient oracle price error is thrown if fetched prices from oracle is invalid",
        "params": {
          "vToken": "vToken address"
        },
        "returns": {
          "_0": "price USD price in scaled decimal places."
        }
      },
      "initialize(address)": {
        "params": {
          "accessControlManager_": "Address of the access control manager contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "custom:access": "Only Governance"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setOracle(address,address,uint8)": {
        "custom:access": "Only Governance",
        "custom:error": "Null address error if main-role oracle address is nullNotNullAddress error is thrown if asset address is nullTokenConfigExistance error is thrown if token config is not set",
        "custom:event": "Emits OracleSet event with asset address, oracle address and role of the oracle for the asset",
        "details": "Supplied asset **must** exist and main oracle may not be null",
        "params": {
          "asset": "Asset address",
          "oracle": "Oracle address",
          "role": "Oracle role"
        }
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "custom:access": "Only Governance",
        "custom:error": "NotNullAddress is thrown if asset address is nullNotNullAddress is thrown if main-role oracle address for asset is null",
        "custom:event": "Emits TokenConfigAdded event when the asset config is set successfully by the authorized account",
        "details": "main oracle **must not** be a null address",
        "params": {
          "tokenConfig": "Token config struct"
        }
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "custom:access": "Only Governance",
        "custom:error": "Throws a length error if the length of the token configs array is 0",
        "params": {
          "tokenConfigs_": "Token config array"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpause()": {
        "custom:access": "Only Governance"
      },
      "updateAssetPrice(address)": {
        "details": "This function should always be called before calling getPrice",
        "params": {
          "asset": "asset address"
        }
      },
      "updatePrice(address)": {
        "details": "This function should always be called before calling getUnderlyingPrice",
        "params": {
          "vToken": "vToken address"
        }
      }
    },
    "stateVariables": {
      "boundValidator": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nativeMarket": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vai": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "title": "ResilientOracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "OracleEnabled(address,uint256,bool)": {
        "notice": "Event emitted when an oracle is enabled or disabled"
      },
      "OracleSet(address,address,uint256)": {
        "notice": "Event emitted when an oracle is set"
      }
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "boundValidator()": {
        "notice": "Bound validator contract address"
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "enableOracle(address,uint8,bool)": {
        "notice": "Enables/ disables oracle for the input asset. Token config for the input asset **must** exist"
      },
      "getOracle(address,uint8)": {
        "notice": "Gets oracle and enabled status by asset address"
      },
      "getPrice(address)": {
        "notice": "Gets price of the asset"
      },
      "getUnderlyingPrice(address)": {
        "notice": "Gets price of the underlying asset for a given vToken. Validation flow: - Check if the oracle is paused globally - Validate price from main oracle against pivot oracle - Validate price from fallback oracle against pivot oracle if the first validation failed - Validate price from main oracle against fallback oracle if the second validation failed In the case that the pivot oracle is not available but main price is available and validation is successful, main oracle price is returned."
      },
      "initialize(address)": {
        "notice": "Initializes the contract admin and sets the BoundValidator contract address"
      },
      "nativeAsset()": {
        "notice": "Set this as asset address for Native token on each chain."
      },
      "nativeMarket()": {
        "notice": "deprecated, keep it here just to maintain the storage layoutNative market address"
      },
      "pause()": {
        "notice": "Pauses oracle"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setOracle(address,address,uint8)": {
        "notice": "Sets oracle for a given asset and role."
      },
      "setTokenConfig((address,address[3],bool[3]))": {
        "notice": "Sets/resets single token configs."
      },
      "setTokenConfigs((address,address[3],bool[3])[])": {
        "notice": "Batch sets token configs"
      },
      "unpause()": {
        "notice": "Unpauses oracle"
      },
      "updateAssetPrice(address)": {
        "notice": "Updates the pivot oracle price. Currently using TWAP"
      },
      "updatePrice(address)": {
        "notice": "Updates the TWAP pivot oracle price."
      },
      "vai()": {
        "notice": "deprecated, keeip it here just to maintain the storage layoutVAI address"
      }
    },
    "notice": "The Resilient Oracle is the main contract that the protocol uses to fetch prices of assets. DeFi protocols are vulnerable to price oracle failures including oracle manipulation and incorrectly reported prices. If only one oracle is used, this creates a single point of failure and opens a vector for attacking the protocol. The Resilient Oracle uses multiple sources and fallback mechanisms to provide accurate prices and protect the protocol from oracle attacks. Currently it includes integrations with Chainlink, Pyth, Binance Oracle and TWAP (Time-Weighted Average Price) oracles. TWAP uses PancakeSwap as the on-chain price source. For every market (vToken) we configure the main, pivot and fallback oracles. The oracles are configured per vToken's underlying asset address. The main oracle oracle is the most trustworthy price source, the pivot oracle is used as a loose sanity checker and the fallback oracle is used as a backup price source. To validate prices returned from two oracles, we use an upper and lower bound ratio that is set for every market. The upper bound ratio represents the deviation between reported price (the price that’s being validated) and the anchor price (the price we are validating against) above which the reported price will be invalidated. The lower bound ratio presents the deviation between reported price and anchor price below which the reported price will be invalidated. So for oracle price to be considered valid the below statement should be true: ``` anchorRatio = anchorPrice/reporterPrice isValid = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio ``` In most cases, Chainlink is used as the main oracle, TWAP or Pyth oracles are used as the pivot oracle depending on which supports the given market and Binance oracle is used as the fallback oracle. For some markets we may use Pyth or TWAP as the main oracle if the token price is not supported by Chainlink or Binance oracles. For a fetched price to be valid it must be positive and not stagnant. If the price is invalid then we consider the oracle to be stagnant and treat it like it's disabled.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 292,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 295,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 962,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 476,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 581,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 164,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 284,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 57,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 151,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2799,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IAccessControlManagerV8)2984"
      },
      {
        "astId": 2804,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3051,
        "contract": "contracts/ResilientOracle.sol:ResilientOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_struct(TokenConfig)3030_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)2984": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenConfig)3030_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ResilientOracle.TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)3030_storage"
      },
      "t_struct(TokenConfig)3030_storage": {
        "encoding": "inplace",
        "label": "struct ResilientOracle.TokenConfig",
        "members": [
          {
            "astId": 3019,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3024,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "oracles",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)3_storage"
          },
          {
            "astId": 3029,
            "contract": "contracts/ResilientOracle.sol:ResilientOracle",
            "label": "enableFlagsForOracles",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bool)3_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}