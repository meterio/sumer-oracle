{
  "address": "0x34E174Bfc3Bb3A45eb766f235E407b255439e3d9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "amountForShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountPerShare",
          "type": "uint256"
        }
      ],
      "name": "setAmountPerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f20b0c4f89e602081d0bd078a0d6e5303087b5bd92cfcea074a764334cf7c4d",
  "receipt": {
    "to": null,
    "from": "0x14b27D8DC12E59a9904DaC6d17D33B8de2E80e66",
    "contractAddress": "0x34E174Bfc3Bb3A45eb766f235E407b255439e3d9",
    "transactionIndex": 82,
    "gasUsed": "249677",
    "logsBloom": "0x
    "blockHash": "0x6d33d6f78c4dd3d3647f88428ea9010ec16d6a3a56adc47306f0baa0e8da8543",
    "transactionHash": "0x7f20b0c4f89e602081d0bd078a0d6e5303087b5bd92cfcea074a764334cf7c4d",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 6158528,
        "transactionHash": "0x7f20b0c4f89e602081d0bd078a0d6e5303087b5bd92cfcea074a764334cf7c4d",
        "address": "0x34E174Bfc3Bb3A45eb766f235E407b255439e3d9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000014b27d8dc12e59a9904dac6d17d33b8de2e80e66"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x6d33d6f78c4dd3d3647f88428ea9010ec16d6a3a56adc47306f0baa0e8da8543"
      }
    ],
    "blockNumber": 6158528,
    "cumulativeGasUsed": "9076523",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d54b43a0e9ac451a7aa45dae4945f5e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"amountForShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPerShare\",\"type\":\"uint256\"}],\"name\":\"setAmountPerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amountPerShare()\":{\"notice\":\"The amount of eETH per weETH scaled by 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockEtherFiLiquidityPool.sol\":\"MockEtherFiLiquidityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IEtherFiLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\ninterface IEtherFiLiquidityPool {\\n    function amountForShare(uint256 _share) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xce3955be63e9f3787e90573c72c119238d2e63712c1a828b874145b1f91761d6\",\"license\":\"BSD-3-Clause\"},\"contracts/test/MockEtherFiLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"../interfaces/IEtherFiLiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MockEtherFiLiquidityPool is IEtherFiLiquidityPool, Ownable {\\n    /// @notice The amount of eETH per weETH scaled by 1e18\\n    uint256 public amountPerShare;\\n\\n    constructor() Ownable() {}\\n\\n    function setAmountPerShare(uint256 _amountPerShare) external onlyOwner {\\n        amountPerShare = _amountPerShare;\\n    }\\n\\n    function amountForShare(uint256 _share) external view override returns (uint256) {\\n        return (_share * amountPerShare) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x7546c418d5ce4bc5a9467d6cd2be25ad3113a9341d5970b4c7c62d6daaf5db79\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50601733601b565b606b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103198061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063561bddf814610067578063715018a61461008d5780637c5a227c146100975780638da5cb5b146100a0578063b1ef362d146100bb578063f2fde38b146100ce575b600080fd5b61007a610075366004610253565b6100e1565b6040519081526020015b60405180910390f35b61009561010a565b005b61007a60015481565b6000546040516001600160a01b039091168152602001610084565b6100956100c9366004610253565b61011e565b6100956100dc36600461026c565b61012b565b6000670de0b6b3a7640000600154836100fa919061029c565b61010491906102c1565b92915050565b6101126101a9565b61011c6000610203565b565b6101266101a9565b600155565b6101336101a9565b6001600160a01b03811661019d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101a681610203565b50565b6000546001600160a01b0316331461011c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610194565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561026557600080fd5b5035919050565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b9392505050565b808202811582820484141761010457634e487b7160e01b600052601160045260246000fd5b6000826102de57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b606da72ed82738eab0db76e47fe71859fb5f296d4e69accb7714dfc1ff8274764736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063561bddf814610067578063715018a61461008d5780637c5a227c146100975780638da5cb5b146100a0578063b1ef362d146100bb578063f2fde38b146100ce575b600080fd5b61007a610075366004610253565b6100e1565b6040519081526020015b60405180910390f35b61009561010a565b005b61007a60015481565b6000546040516001600160a01b039091168152602001610084565b6100956100c9366004610253565b61011e565b6100956100dc36600461026c565b61012b565b6000670de0b6b3a7640000600154836100fa919061029c565b61010491906102c1565b92915050565b6101126101a9565b61011c6000610203565b565b6101266101a9565b600155565b6101336101a9565b6001600160a01b03811661019d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101a681610203565b50565b6000546001600160a01b0316331461011c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610194565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561026557600080fd5b5035919050565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b9392505050565b808202811582820484141761010457634e487b7160e01b600052601160045260246000fd5b6000826102de57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220b606da72ed82738eab0db76e47fe71859fb5f296d4e69accb7714dfc1ff8274764736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amountPerShare()": {
        "notice": "The amount of eETH per weETH scaled by 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1405,
        "contract": "contracts/test/MockEtherFiLiquidityPool.sol:MockEtherFiLiquidityPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10225,
        "contract": "contracts/test/MockEtherFiLiquidityPool.sol:MockEtherFiLiquidityPool",
        "label": "amountPerShare",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
